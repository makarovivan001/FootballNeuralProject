# setup_lineup_system.py
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–æ–≤
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'football_statistics.settings')
django.setup()


def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    from game.models import Game

    total_games = Game.objects.count()
    games_with_data = Game.objects.filter(
        is_finished=True,
        home_club_placement__isnull=False,
        away_club_placement__isnull=False,
        home_players__isnull=False,
        away_players__isnull=False
    ).count()

    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}")
    print(f"   –ò–≥—Ä —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {games_with_data}")

    if games_with_data < 10:
        print("‚ö†Ô∏è  –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å")
        return False

    print("‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
    return True


def create_basic_model():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Ä–∞–±–æ—á—É—é –º–æ–¥–µ–ª—å"""
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏...")

    import numpy as np
    import pickle
    from sklearn.preprocessing import StandardScaler
    from keras.models import Sequential
    from keras.layers import Dense
    from keras.optimizers import Adam

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å
    model = Sequential([
        Dense(256, activation='relu', input_shape=(433,)),
        Dense(128, activation='relu'),
        Dense(64, activation='relu'),
        Dense(33, activation='sigmoid')
    ])

    model.compile(optimizer=Adam(learning_rate=0.001), loss='mse', metrics=['mae'])

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    X_dummy = np.random.random((50, 433))
    y_dummy = np.random.random((50, 33))

    print("   –û–±—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏...")
    model.fit(X_dummy, y_dummy, epochs=5, verbose=0)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
    model.save('lineup_prediction_model.keras')
    print("‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: lineup_prediction_model.keras")

    # –°–æ–∑–¥–∞–µ–º —Å–∫–∞–ª–µ—Ä
    scaler = StandardScaler()
    scaler.fit(X_dummy)

    with open('lineup_scaler.pkl', 'wb') as f:
        pickle.dump(scaler, f)
    print("‚úÖ –°–∫–∞–ª–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: lineup_scaler.pkl")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    normalization_info = {
        'player_id_min': 3000,
        'player_id_range': 4000,
        'position_id_max': 120,
        'line_max': 4.0
    }

    with open('normalization_info.pkl', 'wb') as f:
        pickle.dump(normalization_info, f)
    print("‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: normalization_info.pkl")


def train_real_model():
    """–û–±—É—á–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â—É—é –º–æ–¥–µ–ª—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üéØ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–µ—Ä
        from train_formation_predictor import TeamLineupPredictor

        predictor = TeamLineupPredictor()
        predictor.train()

        print("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        print("   –°–æ–∑–¥–∞–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å...")
        return False


def test_prediction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")

    try:
        from predict_formation import TeamLineupPredictor

        predictor = TeamLineupPredictor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏
        if predictor.model is None or predictor.scaler is None:
            print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return False

        print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∏–≥—Ä–µ 89
        result = predictor.predict_lineup(89, True)

        if result:
            print("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"   –ö–æ–º–∞–Ω–¥–∞: {result['club_id']}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['prediction_confidence']:.2f}")
            return True
        else:
            print("‚ùå –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


def setup_api():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç API"""
    print("üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º main.py
    if os.path.exists('main.py'):
        print("‚úÖ main.py –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå main.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML —Ñ–∞–π–ª
    if os.path.exists('ai.html'):
        print("‚úÖ ai.html –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ö†Ô∏è  ai.html –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ")

    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("=" * 60)
    print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê –°–ò–°–¢–ï–ú–´ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø –°–û–°–¢–ê–í–û–í")
    print("=" * 60)

    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    has_data = check_requirements()

    # –®–∞–≥ 2: –û–±—É—á–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    if has_data:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â—É—é –º–æ–¥–µ–ª—å
        if not train_real_model():
            create_basic_model()
    else:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å
        create_basic_model()

    # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if test_prediction():
        print("\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π")
        return False

    # –®–∞–≥ 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API
    setup_api()

    print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Django —Å–µ—Ä–≤–µ—Ä")
    print("2. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –Ω–∞ http://localhost:8000/ai/")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã 89")
    print("4. –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –∫–æ—Ä—Ä–µ–∫—Ü–∏–π")

    print("\nüí° –í–ê–ñ–ù–´–ï –§–ê–ô–õ–´:")
    print("- lineup_prediction_model.keras (–º–æ–¥–µ–ª—å)")
    print("- lineup_scaler.pkl (–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è)")
    print("- main.py (Django API)")
    print("- predict_formation.py (–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è)")

    return True


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()