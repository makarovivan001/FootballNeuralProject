import os
import django
import numpy as np
import pickle
from datetime import datetime
from keras.models import load_model
from keras.optimizers import Adam
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'football_statistics.settings')
django.setup()

from game.models import Game


class ModelFinetuner:
    def __init__(self, predictor_instance):
        self.predictor = predictor_instance
        self.correction_history = []

    def add_correction(self, game_id, predicted_placement, actual_placement, predict_home=True):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã
        features, club_id = self.predictor.create_prediction_features(game_id, predict_home)

        if features is None:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏")
            return False

        # –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º encode_placement (–ù–ï encode_placement_structured!)
        try:
            actual_encoded = self.predictor.encode_placement(actual_placement)
            predicted_encoded = self.predictor.encode_placement(predicted_placement)

            print(f"–ö–æ–¥–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞: actual={len(actual_encoded)}, predicted={len(predicted_encoded)}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return False

        correction_data = {
            'game_id': game_id,
            'features': features,
            'actual_target': actual_encoded,
            'predicted_target': predicted_encoded,
            'predict_home': predict_home,
            'club_id': club_id,
            'timestamp': datetime.now()
        }

        self.correction_history.append(correction_data)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –∏–≥—Ä—ã {game_id}")
        return True

    def fine_tune_model(self, learning_rate=0.0001, epochs=10):
        """–î–æ–æ–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞—Ö"""

        if len(self.correction_history) == 0:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è")
            return False

        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ {len(self.correction_history)} –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞—Ö...")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è
        X_corrections = []
        y_corrections = []

        for correction in self.correction_history:
            X_corrections.append(correction['features'])
            y_corrections.append(correction['actual_target'])

        X_corrections = np.array(X_corrections)
        y_corrections = np.array(y_corrections)

        print(f"üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: X={X_corrections.shape}, y={y_corrections.shape}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
        if X_corrections.shape[1] != 433:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {X_corrections.shape[1]}, –æ–∂–∏–¥–∞–µ—Ç—Å—è 433")
            return False

        if y_corrections.shape[1] != 33:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {y_corrections.shape[1]}, –æ–∂–∏–¥–∞–µ—Ç—Å—è 33")
            return False

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        try:
            X_corrections_scaled = self.predictor.scaler.transform(X_corrections)
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –≤–µ—Å–∞ –∫–∞–∫ backup
        try:
            backup_path = self.predictor.get_file_path('model_backup_before_finetune.keras')
            self.predictor.model.save(backup_path)
            print(f"‚úÖ Backup –º–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–Ω: {backup_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å backup: {e}")

        # –£–º–µ–Ω—å—à–∞–µ–º learning rate –¥–ª—è fine-tuning
        try:
            self.predictor.model.compile(
                optimizer=Adam(learning_rate=learning_rate),
                loss='mse',
                metrics=['mae']
            )
            print(f"‚úÖ –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–∞ —Å LR={learning_rate}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
            return False

        # –î–æ–æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        try:
            print("üéØ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–æ–±—É—á–µ–Ω–∏–µ...")

            history = self.predictor.model.fit(
                X_corrections_scaled,
                y_corrections,
                epochs=epochs,
                batch_size=min(8, len(X_corrections)),
                verbose=1,
                validation_split=0.2 if len(X_corrections) > 5 else 0
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            finetuned_path = self.predictor.get_file_path('lineup_prediction_model_finetuned.keras')
            self.predictor.model.save(finetuned_path)
            print(f"‚úÖ –î–æ–æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {finetuned_path}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
            history_path = self.predictor.get_file_path('correction_history.pkl')
            with open(history_path, 'wb') as f:
                pickle.dump(self.correction_history, f)
            print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {history_path}")

            final_loss = history.history['loss'][-1]
            print(f"üéâ –î–æ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {final_loss:.4f}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
            if len(history.history['loss']) > 1:
                initial_loss = history.history['loss'][0]
                improvement = ((initial_loss - final_loss) / initial_loss) * 100
                print(f"üìà –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f}%")

            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
            return False

    def evaluate_correction_impact(self, game_id, predict_home=True):
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤–ª–∏—è–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
        try:
            backup_path = self.predictor.get_file_path('model_backup_before_finetune.keras')
            original_model = load_model(backup_path, compile=False)
            original_model.compile(optimizer=Adam(), loss='mse', metrics=['mae'])
            print("‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {e}")
            return None

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        features, club_id = self.predictor.create_prediction_features(game_id, predict_home)
        if features is None:
            return None

        try:
            features_scaled = self.predictor.scaler.transform(features.reshape(1, -1))

            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–µ–π
            original_pred = original_model.predict(features_scaled, verbose=0)[0]
            updated_pred = self.predictor.model.predict(features_scaled, verbose=0)[0]

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–∏—è
            diff = np.mean(np.abs(updated_pred - original_pred))

            return {
                'game_id': game_id,
                'club_id': club_id,
                'average_difference': float(diff),
                'improvement_percentage': float(diff * 100),
                'original_prediction_length': len(original_pred),
                'updated_prediction_length': len(updated_pred)
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None

    def load_correction_history(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫"""
        try:
            history_path = self.predictor.get_file_path('correction_history.pkl')
            with open(history_path, 'rb') as f:
                self.correction_history = pickle.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.correction_history)} –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫")
        except FileNotFoundError:
            print("‚ÑπÔ∏è  –ò—Å—Ç–æ—Ä–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)")
            self.correction_history = []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            self.correction_history = []

    def get_statistics(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –∫–æ—Ä—Ä–µ–∫—Ü–∏–π"""
        if not self.correction_history:
            return {
                'total_corrections': 0,
                'clubs': {},
                'recent_corrections': 0
            }

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        clubs = {}
        recent_count = 0
        now = datetime.now()

        for correction in self.correction_history:
            club_id = correction.get('club_id')
            if club_id:
                clubs[club_id] = clubs.get(club_id, 0) + 1

            # –°—á–∏—Ç–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é)
            timestamp = correction.get('timestamp')
            if timestamp and (now - timestamp).days <= 7:
                recent_count += 1

        return {
            'total_corrections': len(self.correction_history),
            'clubs': clubs,
            'recent_corrections': recent_count
        }


def create_correction_interface():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""

    print("üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –ö–û–†–†–ï–ö–¶–ò–ô")
    print("=" * 50)

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä
    try:
        from predict_formation import TeamLineupPredictor
        print("‚úÖ TeamLineupPredictor –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä
    print("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞...")
    predictor = TeamLineupPredictor()

    if predictor.model is None or predictor.scaler is None:
        print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏.")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python train_formation_predictor.py")
        print("   2. –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å: python setup_lineup_system.py")
        return

    print("‚úÖ –ü—Ä–µ–¥–∏–∫—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–Ω—Ç—é–Ω–µ—Ä
    finetuner = ModelFinetuner(predictor)
    finetuner.load_correction_history()

    while True:
        print("\n" + "=" * 50)
        print("üéØ –°–ò–°–¢–ï–ú–ê –ö–û–†–†–ï–ö–¶–ò–ò –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô")
        print("=" * 50)
        print("1. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ü–∏—é")
        print("2. üß† –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ–æ–±—É—á–µ–Ω–∏–µ")
        print("3. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("4. üî¨ –ê–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω–∏–π")
        print("5. üö™ –í—ã—Ö–æ–¥")
        print("=" * 50)

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): ").strip()

        if choice == '1':
            try:
                print("\nüìù –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–û–†–†–ï–ö–¶–ò–ò")
                print("-" * 30)

                game_id = input("ID –∏–≥—Ä—ã: ").strip()
                if not game_id:
                    print("‚ùå ID –∏–≥—Ä—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                    continue

                game_id = int(game_id)

                predict_home = input("–î–æ–º–∞—à–Ω—è—è –∫–æ–º–∞–Ω–¥–∞? (y/n): ").strip().lower() == 'y'

                print("üîÑ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ...")
                current_prediction = predictor.predict_lineup(game_id, predict_home)
                if not current_prediction:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
                    continue

                print("\nüéØ –¢–µ–∫—É—â–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:")
                predictor.visualize_lineup(current_prediction)

                print("\nüìã –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:")
                print("üí° –ü—Ä–∏–º–µ—Ä: [[{'id': 4249, 'position_id': 11}], [{'id': 4262, 'position_id': 32}], ...]")

                actual_json = input("\n–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞: ").strip()
                if not actual_json:
                    print("‚ùå –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π")
                    continue

                try:
                    actual_placement = json.loads(actual_json)
                except json.JSONDecodeError as e:
                    print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON: {e}")
                    continue

                # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if not isinstance(actual_placement, list):
                    print("‚ùå –û—à–∏–±–∫–∞: —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º")
                    continue

                total_players = sum(len(line) for line in actual_placement if isinstance(line, list))
                if total_players != 11:
                    print(f"‚ùå –û—à–∏–±–∫–∞: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 11 –∏–≥—Ä–æ–∫–æ–≤, –∞ –Ω–∞–π–¥–µ–Ω–æ {total_players}")
                    continue

                print("‚öôÔ∏è  –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—é...")
                success = finetuner.add_correction(
                    game_id,
                    current_prediction['placement'],
                    actual_placement,
                    predict_home
                )

                if success:
                    stats = finetuner.get_statistics()
                    print(f"üéâ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                    print(f"üìà –í—Å–µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫: {stats['total_corrections']}")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ü–∏—é")

            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–≥—Ä—ã (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ)")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        elif choice == '2':
            stats = finetuner.get_statistics()
            if stats['total_corrections'] == 0:
                print("‚ùå –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è")
                print("üí° –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ—Ä—Ä–µ–∫—Ü–∏—é (–¥–µ–π—Å—Ç–≤–∏–µ 1)")
                continue

            print(f"\nüß† –î–û–û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò")
            print("-" * 30)
            print(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫: {stats['total_corrections']}")

            try:
                lr_input = input("Learning rate (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.0001): ").strip()
                lr = float(lr_input) if lr_input else 0.0001

                epochs_input = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): ").strip()
                epochs = int(epochs_input) if epochs_input else 10

                if lr <= 0 or lr > 0.1:
                    print("‚ùå Learning rate –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0.0001 –∏ 0.1")
                    continue

                if epochs < 1 or epochs > 100:
                    print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É 1 –∏ 100")
                    continue

                print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –¥–æ–æ–±—É—á–µ–Ω–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
                print(f"   üìê Learning Rate: {lr}")
                print(f"   üîÑ –≠–ø–æ—Ö–∏: {epochs}")
                print(f"   üìä –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫: {stats['total_corrections']}")

                confirm = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ").strip().lower()
                if confirm != 'y':
                    print("‚ùå –î–æ–æ–±—É—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                    continue

                success = finetuner.fine_tune_model(learning_rate=lr, epochs=epochs)

                if success:
                    print("\nüéâ –î–û–û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")

                    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
                    try:
                        finetuned_path = predictor.get_file_path('lineup_prediction_model_finetuned.keras')
                        predictor.model = load_model(finetuned_path, compile=False)
                        from keras.optimizers import Adam
                        predictor.model.compile(
                            optimizer=Adam(learning_rate=0.001),
                            loss='mse',
                            metrics=['mae']
                        )
                        print("‚úÖ –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å –Ω–æ–≤—ã–º–∏ –≤–µ—Å–∞–º–∏")
                    except Exception as e:
                        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å: {e}")
                else:
                    print("‚ùå –î–æ–æ–±—É—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")

            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏)")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        elif choice == '3':
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´")
            print("-" * 30)

            stats = finetuner.get_statistics()

            print(f"üìà –í—Å–µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫: {stats['total_corrections']}")
            print(f"üïê –ù–µ–¥–∞–≤–Ω–∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ (7 –¥–Ω–µ–π): {stats['recent_corrections']}")
            print(f"‚öΩ –ö–æ–º–∞–Ω–¥ —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞–º–∏: {len(stats['clubs'])}")

            if stats['clubs']:
                print(f"\nüèÜ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:")
                for club_id, count in sorted(stats['clubs'].items(), key=lambda x: x[1], reverse=True):
                    print(f"   –ö–æ–º–∞–Ω–¥–∞ {club_id}: {count} –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
            print(f"\nüíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞–π–ª–æ–≤:")
            files_to_check = [
                ('lineup_prediction_model.keras', '–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å'),
                ('lineup_prediction_model_finetuned.keras', '–î–æ–æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å'),
                ('model_backup_before_finetune.keras', 'Backup –º–æ–¥–µ–ª–∏'),
                ('correction_history.pkl', '–ò—Å—Ç–æ—Ä–∏—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–π'),
                ('lineup_scaler.pkl', '–°–∫–∞–ª–µ—Ä'),
                ('normalization_info.pkl', '–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è')
            ]

            for filename, description in files_to_check:
                file_path = predictor.get_file_path(filename)
                status = "‚úÖ" if os.path.exists(file_path) else "‚ùå"
                print(f"   {status} {description}")

        elif choice == '4':
            print(f"\nüî¨ –ê–ù–ê–õ–ò–ó –£–õ–£–ß–®–ï–ù–ò–ô")
            print("-" * 30)

            try:
                test_game_id = input("ID –∏–≥—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ").strip()
                if not test_game_id:
                    print("‚ùå ID –∏–≥—Ä—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                    continue

                test_game_id = int(test_game_id)
                predict_home = input("–î–æ–º–∞—à–Ω—è—è –∫–æ–º–∞–Ω–¥–∞? (y/n): ").strip().lower() == 'y'

                print("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏—è...")
                result = finetuner.evaluate_correction_impact(test_game_id, predict_home)

                if result:
                    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:")
                    print(f"   üéØ –ò–≥—Ä–∞: {result['game_id']}")
                    print(f"   ‚öΩ –ö–æ–º–∞–Ω–¥–∞: {result['club_id']}")
                    print(f"   üìà –°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–∏—Ü–∞: {result['average_difference']:.4f}")
                    print(f"   üìä –£–ª—É—á—à–µ–Ω–∏–µ: {result['improvement_percentage']:.2f}%")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑")

            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–≥—Ä—ã (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ)")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        elif choice == '5':
            print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏")
            print("üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ!")
            break

        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ 5.")


if __name__ == "__main__":
    try:
        create_correction_interface()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()