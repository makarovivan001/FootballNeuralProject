# ai-new.py - –ò—Ç–æ–≥–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ò–ò —Å –∂–µ—Å—Ç–∫–∏–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏

import os
import django

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "football_main.settings")
django.setup()

import numpy as np
import json
import joblib
from keras.models import load_model
from game.models import Game
from player.models import Player, Position, PlayerGameStatistic
from club.models import Club
from django.db.models import Q

print("üéØ –ò–¢–û–ì–û–í–´–ô SKLEARN AI –° –ñ–ï–°–¢–ö–ò–ú–ò –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø–ú–ò")
print("üìä –ê–Ω—Å–∞–º–±–ª—å: RF + ET + GB + LR + NN + –£–ª—É—á—à–µ–Ω–Ω–∞—è NN + –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π")
print("üîí –ñ–µ—Å—Ç–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è + —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ + —Å—Ç—Ä–æ–≥–æ 11 –∏–≥—Ä–æ–∫–æ–≤")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
try:
    rf_model = joblib.load("sklearn_rf_model.pkl")
    et_model = joblib.load("sklearn_et_model.pkl")
    gb_model = joblib.load("sklearn_gb_model.pkl")
    lr_model = joblib.load("sklearn_lr_model.pkl")
    nn_model = load_model("sklearn_nn_model.keras", compile=False)

    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    try:
        improved_nn_model = load_model("neural_network_improved.keras", compile=False)
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
    except:
        improved_nn_model = None
        print("‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é")

    scaler = joblib.load("sklearn_scaler.pkl")

    with open("sklearn_config.json", "r") as f:
        config = json.load(f)

    POSITION_LINES = config['position_lines']
    TACTICAL_COMPATIBILITY = config['tactical_compatibility']
    EXCLUDED_POSITIONS = config['excluded_positions']

    print(f"‚úÖ Sklearn –∞–Ω—Å–∞–º–±–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω!")
    print(f"üìä –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {config['best_model']}")
    print(f"üéØ –õ—É—á—à–∏–π AUC: {config.get('best_score', 0):.1%}")
    print(f"üìè –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {config['input_dim']}")
    print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!")

except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    print("üîß –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ new_train.py")
    exit(1)


def safe_float(value, default=0.0):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ float"""
    try:
        if value is None:
            return default
        return float(value)
    except (ValueError, TypeError):
        return default


# ========== –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò –ò–ì–†–û–í–û–ì–û –í–†–ï–ú–ï–ù–ò ==========

def has_played_this_season(player_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–≥—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ –≤ —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ"""
    try:
        player = Player.objects.get(id=player_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
        if player.statistic:
            minutes_played = safe_float(getattr(player.statistic, 'minutes_played', 0))
            matches_played = safe_float(getattr(player.statistic, 'matches_uppercase', 0))

            # –ï—Å–ª–∏ –∏–≥—Ä–∞–ª —Ö–æ—Ç—è –±—ã 1 –º–∏–Ω—É—Ç—É –≤ —Ö–æ—Ç—è –±—ã 1 –º–∞—Ç—á–µ
            if minutes_played > 0 or matches_played > 0:
                return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã)
        recent_games = PlayerGameStatistic.objects.filter(
            player_id=player_id,
            minutes_played__gt=0  # –ò–≥—Ä–∞–ª —Ö–æ—Ç—è –±—ã –º–∏–Ω—É—Ç—É
        ).exists()

        return recent_games

    except Player.DoesNotExist:
        return False


def filter_players_with_game_time(squad):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–≥—Ä–∞–ª–∏ –≤ —Å–µ–∑–æ–Ω–µ"""
    filtered_squad = []

    for player in squad:
        if has_played_this_season(player['id']):
            filtered_squad.append(player)
        else:
            print(f"  üö´ –ò—Å–∫–ª—é—á–µ–Ω {player['name']} {player['surname']} - –Ω–µ –∏–≥—Ä–∞–ª –≤ —Å–µ–∑–æ–Ω–µ")

    print(f"üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {len(squad)} ‚Üí {len(filtered_squad)}")
    return filtered_squad


# ========== –§–£–ù–ö–¶–ò–ò –í–ê–õ–ò–î–ê–¶–ò–ò –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –ü–û–ó–ò–¶–ò–ô ==========
def find_players_for_missing_positions(consistent_lineup, squad, used_players, used_positions, line_quality,
                                       game_date=None):
    """–ù–∞—Ö–æ–¥–∏—Ç –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É minutes_played —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""

    if len(consistent_lineup) >= 11:
        return consistent_lineup

    needed = 11 - len(consistent_lineup)
    print(f"üîç –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏: –Ω—É–∂–Ω–æ {needed} –∏–≥—Ä–æ–∫–æ–≤")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫–∏–µ –ª–∏–Ω–∏–∏ –∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞–º –Ω—É–∂–Ω—ã
    line_analysis = {
        1: {'current': 0, 'target': 1, 'positions': []},  # –í—Ä–∞—Ç–∞—Ä–∏
        2: {'current': 0, 'target': 3, 'positions': []},  # –ó–∞—â–∏—Ç–Ω–∏–∫–∏
        4: {'current': 0, 'target': 4, 'positions': []},  # –ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫–∏
        5: {'current': 0, 'target': 1, 'positions': []},  # –ê—Ç–∞–∫—É—é—â–∏–µ
        6: {'current': 0, 'target': 2, 'positions': []}  # –ù–∞–ø–∞–¥–∞—é—â–∏–µ
    }

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ª–∏–Ω–∏—è–º
    for player in consistent_lineup:
        position_id = player['position_id']
        position_info = POSITION_LINES.get(str(position_id), {'line': 0})
        line_num = position_info['line']

        if line_num in line_analysis:
            line_analysis[line_num]['current'] += 1
            line_analysis[line_num]['positions'].append(position_id)

    print("üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ –ø–æ –ª–∏–Ω–∏—è–º:")
    line_names = {1: "–í—Ä–∞—Ç–∞—Ä–∏", 2: "–ó–∞—â–∏—Ç–Ω–∏–∫–∏", 4: "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫–∏", 5: "–ê—Ç–∞–∫—É—é—â–∏–µ", 6: "–ù–∞–ø–∞–¥–∞—é—â–∏–µ"}
    for line_num, data in line_analysis.items():
        print(f"    {line_names[line_num]}: {data['current']}/{data['target']} (–ø–æ–∑–∏—Ü–∏–∏: {data['positions']})")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    priority_lines = []
    for line_num, data in line_analysis.items():
        if data['current'] < data['target']:
            shortage = data['target'] - data['current']
            priority_lines.append((line_num, shortage))

    priority_lines.sort(key=lambda x: x[1], reverse=True)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–µ—Ö–≤–∞—Ç–∫–µ
    print(f"üìã –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {priority_lines}")

    added_players = []

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º –ª–∏–Ω–∏—è–º
    for line_num, shortage in priority_lines:
        if len(consistent_lineup) + len(added_players) >= 11:
            break

        line_name = line_names[line_num]
        print(f"\nüîß –î–æ–ø–æ–ª–Ω—è–µ–º –ª–∏–Ω–∏—é {line_name} (–Ω–µ—Ö–≤–∞—Ç–∫–∞: {shortage})")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—É—é —á–µ—Ç–Ω–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–π –ª–∏–Ω–∏–∏
        if line_num in line_quality:
            required_parity = line_quality[line_num]['chosen']
        else:
            # –î–ª—è –≤—Ä–∞—Ç–∞—Ä–µ–π —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ –≤–∞–∂–Ω–∞
            required_parity = None

        # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–π –ª–∏–Ω–∏–∏
        available_positions = []
        for pos_str, pos_info in POSITION_LINES.items():
            pos_id = int(pos_str)
            if (pos_info['line'] == line_num and
                    pos_id not in used_positions and
                    (pos_id == 11 or pos_id >= 11)):  # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ 1-10, –∫—Ä–æ–º–µ –≤—Ä–∞—Ç–∞—Ä—è

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ç–Ω–æ—Å—Ç—å –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                if required_parity is not None:
                    pos_parity = 'even' if pos_id % 2 == 0 else 'odd'
                    if pos_parity != required_parity:
                        continue

                available_positions.append(pos_id)

        print(f"    –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ª–∏–Ω–∏–∏ {line_name}: {available_positions}")
        if required_parity:
            print(f"    –¢—Ä–µ–±—É–µ–º–∞—è —á–µ—Ç–Ω–æ—Å—Ç—å: {required_parity}")

        # –î–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏—â–µ–º –ª—É—á—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ minutes_played
        line_added = 0
        for pos_id in available_positions:
            if line_added >= shortage or len(consistent_lineup) + len(added_players) >= 11:
                break

            print(f"    üîç –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é {pos_id}...")

            # –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —ç—Ç—É –ø–æ–∑–∏—Ü–∏—é
            candidates = []
            for player in squad:
                if (player['id'] not in used_players and
                        has_played_this_season(player['id'])):

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –∏–≥—Ä–∞—Ç—å –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
                    if can_player_play_position(player['id'], pos_id):
                        # –ü–æ–ª—É—á–∞–µ–º minutes_played –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                        minutes = get_player_minutes_played(player['id'])
                        candidates.append({
                            'player': player,
                            'minutes_played': minutes,
                            'position_id': pos_id
                        })

            if candidates:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ minutes_played (–±–æ–ª—å—à–µ = –ª—É—á—à–µ)
                candidates.sort(key=lambda x: x['minutes_played'], reverse=True)
                best_candidate = candidates[0]

                player = best_candidate['player']
                minutes = best_candidate['minutes_played']

                # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                new_player = {
                    'id': player['id'],
                    'name': f"{player['name']} {player['surname']}",
                    'position_id': pos_id,
                    'probability': 0.6,  # –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è –¥–æ–ø. –∏–≥—Ä–æ–∫–æ–≤
                    'age': player['age'],
                    'number': player['number'],
                    'minutes_played': minutes
                }

                added_players.append(new_player)
                used_players.add(player['id'])
                used_positions.add(pos_id)
                line_added += 1

                print(f"    ‚ûï –ù–∞–π–¥–µ–Ω: {new_player['name']} - –ø–æ–∑–∏—Ü–∏—è {pos_id} ({minutes} –º–∏–Ω—É—Ç)")
            else:
                print(f"    ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é {pos_id}")

    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –ª—é–±—ã—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    if len(consistent_lineup) + len(added_players) < 11:
        remaining_needed = 11 - len(consistent_lineup) - len(added_players)
        print(f"\nüÜò –í—Å–µ –µ—â–µ –Ω—É–∂–Ω–æ {remaining_needed} –∏–≥—Ä–æ–∫–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –ª—é–±—ã—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö...")

        # –ù–∞—Ö–æ–¥–∏–º –ª—é–±—ã—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤
        any_candidates = []
        for player in squad:
            if (player['id'] not in used_players and
                    has_played_this_season(player['id']) and
                    (player['primary_position_id'] == 11 or player['primary_position_id'] >= 11) and
                    player['primary_position_id'] not in used_positions):
                minutes = get_player_minutes_played(player['id'])
                any_candidates.append({
                    'player': player,
                    'minutes_played': minutes,
                    'position_id': player['primary_position_id']
                })

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ minutes_played
        any_candidates.sort(key=lambda x: x['minutes_played'], reverse=True)

        for candidate in any_candidates[:remaining_needed]:
            player = candidate['player']
            minutes = candidate['minutes_played']

            new_player = {
                'id': player['id'],
                'name': f"{player['name']} {player['surname']}",
                'position_id': player['primary_position_id'],
                'probability': 0.5,
                'age': player['age'],
                'number': player['number'],
                'minutes_played': minutes
            }

            added_players.append(new_player)
            used_players.add(player['id'])
            used_positions.add(player['primary_position_id'])

            print(
                f"    ‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {new_player['name']} - –ø–æ–∑–∏—Ü–∏—è {player['primary_position_id']} ({minutes} –º–∏–Ω—É—Ç)")

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(added_players)} –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞")
    return consistent_lineup + added_players


def can_player_play_position(player_id, position_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –∏–≥—Ä–∞—Ç—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        player = Player.objects.get(id=player_id)

        # –û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        if player.primary_position_id == position_id:
            return True

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        if player.position.filter(id=position_id).exists():
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –ª–∏–Ω–∏—è–º (–∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å –Ω–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö –ø–æ–∑–∏—Ü–∏—è—Ö —Ç–æ–π –∂–µ –ª–∏–Ω–∏–∏)
        player_pos_info = POSITION_LINES.get(str(player.primary_position_id), {'line': 0})
        target_pos_info = POSITION_LINES.get(str(position_id), {'line': 0})

        if (player_pos_info['line'] == target_pos_info['line'] and
                player_pos_info['line'] > 0):  # –¢–∞ –∂–µ –ª–∏–Ω–∏—è
            return True

        return False
    except Player.DoesNotExist:
        return False


def get_player_minutes_played(player_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –º–∏–Ω—É—Ç –∏–≥—Ä–æ–∫–∞"""
    try:
        player = Player.objects.get(id=player_id)
        if player.statistic and player.statistic.minutes_played:
            return safe_float(player.statistic.minutes_played)
        return 0
    except Player.DoesNotExist:
        return 0


def check_position_uniqueness(lineup):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π –≤ —Å–æ—Å—Ç–∞–≤–µ"""
    position_ids = [player['position_id'] for player in lineup]
    unique_positions = set(position_ids)

    duplicates = []
    for pos_id in unique_positions:
        count = position_ids.count(pos_id)
        if count > 1:
            duplicates.append((pos_id, count))

    return len(duplicates) == 0, duplicates


def remove_position_duplicates(lineup):
    """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –æ—Å—Ç–∞–≤–ª—è—è –∏–≥—Ä–æ–∫–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é"""
    print("üîç –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
    position_groups = {}
    for player in lineup:
        pos_id = player['position_id']
        if pos_id not in position_groups:
            position_groups[pos_id] = []
        position_groups[pos_id].append(player)

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    unique_lineup = []
    removed_count = 0

    for pos_id, players in position_groups.items():
        if len(players) > 1:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏ –±–µ—Ä–µ–º –¢–û–õ–¨–ö–û –ª—É—á—à–µ–≥–æ
            players.sort(key=lambda x: x['probability'], reverse=True)
            best_player = players[0]
            unique_lineup.append(best_player)

            print(f"    üîÑ –ü–æ–∑–∏—Ü–∏—è {pos_id}: –æ—Å—Ç–∞–≤–ª–µ–Ω {best_player['name']} ({best_player['probability']:.1%})")
            for removed_player in players[1:]:
                print(f"        ‚ùå –£–î–ê–õ–ï–ù {removed_player['name']} ({removed_player['probability']:.1%})")
                removed_count += 1
        else:
            unique_lineup.append(players[0])

    if removed_count > 0:
        print(f"‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —É–¥–∞–ª–µ–Ω–æ {removed_count} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(unique_lineup)} –∏–≥—Ä–æ–∫–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏")
    else:
        print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    return unique_lineup


def ensure_exactly_11_players(lineup, squad, used_player_ids, line_quality, game_date=None):
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–æ—Å—Ç–∞–≤–µ (—Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–π 1-10, –∫—Ä–æ–º–µ –≤—Ä–∞—Ç–∞—Ä—è)"""
    print(f"üî¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤: {len(lineup)}/11")

    if len(lineup) == 11:
        print("‚úÖ –†–æ–≤–Ω–æ 11 –∏–≥—Ä–æ–∫–æ–≤ - –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ!")
        return lineup

    elif len(lineup) > 11:
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 11 - —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏—Ö (—Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é)
        print(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ ({len(lineup)}), —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏—Ö...")

        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–∞—Ç–∞—Ä—è
        goalkeeper = None
        field_players = []

        for player in lineup:
            if player['position_id'] == 11:
                goalkeeper = player
            else:
                field_players.append(player)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        field_players.sort(key=lambda x: x['probability'], reverse=True)

        # –ë–µ—Ä–µ–º —Ç–æ–ø-10 –ø–æ–ª–µ–≤—ã—Ö + –≤—Ä–∞—Ç–∞—Ä—å
        final_lineup = []
        if goalkeeper:
            final_lineup.append(goalkeeper)
            final_lineup.extend(field_players[:10])
        else:
            final_lineup.extend(field_players[:11])

        print(f"‚úÖ –°–æ–∫—Ä–∞—â–µ–Ω–æ –¥–æ {len(final_lineup)} –∏–≥—Ä–æ–∫–æ–≤")
        return final_lineup

    else:
        # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 11 - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö
        needed = 11 - len(lineup)
        print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ ({len(lineup)}), –¥–æ–±–∞–≤–ª—è–µ–º {needed}...")

        # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ê–ö–¢–ò–í–ù–´–• –∏–≥—Ä–æ–∫–æ–≤ (—Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–π 1-10, –∫—Ä–æ–º–µ –≤—Ä–∞—Ç–∞—Ä—è)
        available_players = []
        for player in squad:
            if (player['id'] not in used_player_ids and
                    has_played_this_season(player['id']) and
                    (player['primary_position_id'] == 11 or player['primary_position_id'] >= 11)):
                available_players.append(player)

        if not available_players:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ê–ö–¢–ò–í–ù–´–• –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!")
            print("üîí –°–¢–†–û–ì–û–ï –ü–†–ê–í–ò–õ–û: –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤")
            return lineup

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
            available_features = []
            valid_available = []

            for player in available_players:
                try:
                    features = extract_full_49_features(player, 0, game_date)  # opp_id=0 –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
                    if len(features) == config['input_dim']:
                        available_features.append(features)
                        valid_available.append(player)
                except:
                    continue

            if available_features:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                X_available = np.array(available_features, dtype=np.float32)
                X_available_scaled = scaler.transform(X_available)
                available_probabilities = predict_with_sklearn_ensemble(X_available_scaled)

                # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏
                candidates = []
                for i, player in enumerate(valid_available):
                    prob = float(available_probabilities[i])

                    try:
                        player_obj = Player.objects.get(id=player['id'])
                        primary_pos = player_obj.primary_position.name if player_obj.primary_position else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        injury_status = "ü§ï –¢—Ä–∞–≤–º–∞" if player_obj.injury else "‚úÖ –ó–¥–æ—Ä–æ–≤"
                        overall = 70
                        if player_obj.statistic:
                            overall = safe_float(getattr(player_obj.statistic, 'rating', 7.0)) * 10
                    except:
                        primary_pos = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        injury_status = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        overall = 70

                    candidate = {
                        'id': player['id'],
                        'name': f"{player['name']} {player['surname']}",
                        'position_id': player['primary_position_id'],
                        'position_name': primary_pos,
                        'probability': prob,
                        'injury_status': injury_status,
                        'overall': overall,
                        'age': player['age'],
                        'number': player['number']
                    }
                    candidates.append(candidate)

                # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º —á–µ—Ç–Ω–æ—Å—Ç–∏ –ª–∏–Ω–∏–π
                filtered_candidates = []

                for candidate in candidates:
                    position_id = candidate['position_id']
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1-10 (–∫—Ä–æ–º–µ –≤—Ä–∞—Ç–∞—Ä—è)
                    if position_id == 11 or position_id >= 11:
                        position_info = POSITION_LINES.get(str(position_id), {'line': 0})
                        line_num = position_info['line']

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ç–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –ª–∏–Ω–∏—è –∏–∑–≤–µ—Å—Ç–Ω–∞
                        if line_num in line_quality:
                            chosen_parity = line_quality[line_num]['chosen']
                            player_parity = 'even' if position_id % 2 == 0 else 'odd'

                            if player_parity == chosen_parity:
                                filtered_candidates.append(candidate)
                        else:
                            # –ï—Å–ª–∏ –ª–∏–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                            filtered_candidates.append(candidate)

                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ª—É—á—à–∏—Ö
                filtered_candidates.sort(key=lambda x: x['probability'], reverse=True)

                added_count = 0
                for candidate in filtered_candidates:
                    if added_count >= needed:
                        break

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è
                    existing_positions = [p['position_id'] for p in lineup]
                    if candidate['position_id'] not in existing_positions:
                        lineup.append(candidate)
                        used_player_ids.add(candidate['id'])
                        added_count += 1
                        print(
                            f"    ‚ûï –î–æ–±–∞–≤–ª–µ–Ω: {candidate['name']} - –ø–æ–∑–∏—Ü–∏—è {candidate['position_id']} ({candidate['probability']:.1%})")

                if added_count < needed:
                    print(f"‚ö†Ô∏è –£–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ {added_count} –∏–∑ {needed} –∏–≥—Ä–æ–∫–æ–≤")
                    print(f"üîí –ò—Å–∫–ª—é—á–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ 1-10 (–∫—Ä–æ–º–µ –≤—Ä–∞—Ç–∞—Ä—è 11)")
                else:
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –∏–≥—Ä–æ–∫–æ–≤ –¥–æ {len(lineup)}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤: {e}")

        return lineup


# ========== –§–£–ù–ö–¶–ò–ò –í–ê–õ–ò–î–ê–¶–ò–ò ==========

def check_player_position_compatibility(player_id, position_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –∏–≥—Ä–∞—Ç—å –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        player = Player.objects.get(id=player_id)
        if player.primary_position_id == position_id:
            return True
        if player.position.filter(~Q(id__in=[1, 2, 3, 4, 5]), id=position_id).exists():
            return True
        return False
    except Player.DoesNotExist:
        return False


def get_last_game_lineup(club_id, before_date=None):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–∞–≤ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã"""
    try:
        games_query = Game.objects.filter(
            Q(home_club_id=club_id) | Q(away_club_id=club_id),
            is_finished=True
        )
        if before_date:
            games_query = games_query.filter(game_date__lt=before_date)

        last_game = games_query.order_by('-game_date').first()
        if not last_game:
            return {}

        if last_game.home_club_id == club_id:
            placement = last_game.home_club_placement
        else:
            placement = last_game.away_club_placement

        if not placement:
            return {}

        lineup = {}
        for row in placement:
            for cell in row:
                player_id = cell.get("id")
                position_id = cell.get("position_id")
                if player_id and position_id:
                    lineup[position_id] = player_id
        return lineup
    except Exception:
        return {}


def find_position_players(club_id, position_id):
    """–ù–∞—Ö–æ–¥–∏—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ (—Å —É—á–µ—Ç–æ–º –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)"""
    try:
        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏
        primary_players = Player.objects.filter(
            club_id=club_id,
            primary_position_id=position_id,
            injury__isnull=True
        ).values_list('id', flat=True)

        # –ò—â–µ–º –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏–≥—Ä–∞—Ç—å –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
        secondary_players = Player.objects.filter(
            club_id=club_id,
            position__id=position_id,
            injury__isnull=True
        ).values_list('id', flat=True)

        all_players = list(set(list(primary_players) + list(secondary_players)))

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–≥—Ä–∞–ª–∏ –≤ —Å–µ–∑–æ–Ω–µ
        active_players = []
        for player_id in all_players:
            if has_played_this_season(player_id):
                active_players.append(player_id)

        return active_players
    except Exception:
        return []


def find_replacement_player(club_id, position_id, last_game_lineup):
    """–ù–∞—Ö–æ–¥–∏—Ç –∑–∞–º–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ (—Å —É—á–µ—Ç–æ–º –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)"""
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã
    if position_id in last_game_lineup:
        last_game_player_id = last_game_lineup[position_id]
        if (check_player_position_compatibility(last_game_player_id, position_id) and
                has_played_this_season(last_game_player_id)):
            try:
                player = Player.objects.get(id=last_game_player_id)
                return last_game_player_id, f"{player.name} {player.surname}"
            except Player.DoesNotExist:
                pass

    # –ò—â–µ–º –ª—é–±–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    position_players = find_position_players(club_id, position_id)
    if position_players:
        try:
            player = Player.objects.get(id=position_players[0])
            return position_players[0], f"{player.name} {player.surname}"
        except Player.DoesNotExist:
            return position_players[0], f"Player_{position_players[0]}"

    return None, None


def validate_predicted_lineup(predicted_lineup, club_id, game_date=None):
    """–ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –í–ê–õ–ò–î–ê–¶–ò–ò"""
    print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –¥–ª—è {len(predicted_lineup)} –∏–≥—Ä–æ–∫–æ–≤...")

    corrected_lineup = []
    validation_report = {
        'total_players': len(predicted_lineup),
        'valid_predictions': 0,
        'corrected_predictions': 0,
        'corrections': []
    }

    last_game_lineup = get_last_game_lineup(club_id, game_date)

    for i, player_data in enumerate(predicted_lineup):
        player_id = player_data.get('id')
        position_id = player_data.get('position_id')
        player_name = player_data.get('name', f'Player_{player_id}')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è
        if not has_played_this_season(player_id):
            print(f"  üö´ {player_name} –∏—Å–∫–ª—é—á–µ–Ω - –Ω–µ –∏–≥—Ä–∞–ª –≤ —Å–µ–∑–æ–Ω–µ")
            # –ò—â–µ–º –∑–∞–º–µ–Ω—É
            replacement_id, replacement_name = find_replacement_player(
                club_id, position_id, last_game_lineup
            )
            if replacement_id:
                corrected_player_data = player_data.copy()
                corrected_player_data['id'] = replacement_id
                corrected_player_data['name'] = replacement_name
                corrected_lineup.append(corrected_player_data)
                validation_report['corrected_predictions'] += 1
                print(f"    üîÑ –ó–∞–º–µ–Ω–∞: {player_name} ‚Üí {replacement_name} (–Ω–µ –∏–≥—Ä–∞–ª –≤ —Å–µ–∑–æ–Ω–µ)")
            continue

        if check_player_position_compatibility(player_id, position_id):
            # –ò–≥—Ä–æ–∫ –ø–æ–¥—Ö–æ–¥–∏—Ç
            corrected_lineup.append(player_data)
            validation_report['valid_predictions'] += 1
        else:
            # –ù—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞
            replacement_id, replacement_name = find_replacement_player(
                club_id, position_id, last_game_lineup
            )

            if replacement_id:
                corrected_player_data = player_data.copy()
                corrected_player_data['id'] = replacement_id
                corrected_player_data['name'] = replacement_name

                corrected_lineup.append(corrected_player_data)
                validation_report['corrected_predictions'] += 1
                validation_report['corrections'].append({
                    'original_player': player_name,
                    'replacement_player': replacement_name,
                    'position_id': position_id
                })
                print(f"  üîÑ –ó–∞–º–µ–Ω–∞: {player_name} ‚Üí {replacement_name} (–ø–æ–∑–∏—Ü–∏—è {position_id})")
            else:
                corrected_lineup.append(player_data)

    print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {validation_report['corrected_predictions']} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    return corrected_lineup, validation_report


def predict_with_validation(predicted_lineup, lineup_by_lines, accuracy, club, game):
    """–ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø"""
    print(f"\nüîç –ü–†–ò–ú–ï–ù–Ø–ï–ú –ü–û–õ–ù–£–Æ –í–ê–õ–ò–î–ê–¶–ò–Æ...")

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫
    validated_lineup, validation_report = validate_predicted_lineup(
        predicted_lineup, club.id, game.game_date
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if validation_report['corrected_predictions'] > 0:
        print(f"\n‚ö†Ô∏è –î–ï–¢–ê–õ–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ({validation_report['corrected_predictions']}):")
        for correction in validation_report['corrections']:
            print(f"    üîÑ {correction['original_player']} ‚Üí {correction['replacement_player']}")
            print(f"       –ü–æ–∑–∏—Ü–∏—è: {correction['position_id']}")

    accuracy_rate = validation_report['valid_predictions'] / max(validation_report['total_players'], 1)
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò:")
    print(f"    –¢–æ—á–Ω–æ—Å—Ç—å –ò–ò: {accuracy_rate:.1%}")
    print(f"    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {validation_report['corrected_predictions']}")

    return validated_lineup, lineup_by_lines, accuracy


# ========== –§–£–ù–ö–¶–ò–ò –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ü–†–ò–ó–ù–ê–ö–û–í ==========

def get_enhanced_player_stats(player_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞"""
    try:
        player_obj = Player.objects.get(id=player_id)

        basic_stats = {
            'overall': 70, 'pace': 70, 'shooting': 70, 'passing': 70,
            'dribbling': 70, 'defending': 70, 'physical': 70
        }

        if player_obj.statistic:
            stat = player_obj.statistic
            basic_stats.update({
                'rating': safe_float(getattr(stat, 'rating', 7.0)),
                'goals_per_game': safe_float(getattr(stat, 'goals', 0.0)),
                'assists_per_game': safe_float(getattr(stat, 'assists', 0.0)),
                'shots_per_game': safe_float(getattr(stat, 'shots', 0.0)),
                'passes_accuracy': safe_float(getattr(stat, 'successful_passes_accuracy', 70.0)),
                'duels_won_percent': safe_float(getattr(stat, 'duel_won_percent', 50.0)),
                'tackles_success': safe_float(getattr(stat, 'tackles_succeeded_percent', 50.0)),
                'minutes_played': safe_float(getattr(stat, 'minutes_played', 0)),
                'matches_started': safe_float(getattr(stat, 'started', 0)),
                'total_matches': safe_float(getattr(stat, 'matches_uppercase', 1))
            })

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        recent_games = PlayerGameStatistic.objects.filter(
            player_id=player_id
        ).order_by('-game__game_date')[:10]

        if recent_games:
            recent_rating = np.mean([safe_float(game.rating_title) for game in recent_games if game.rating_title])
            recent_goals = sum([game.goals for game in recent_games])
            recent_assists = sum([game.assists for game in recent_games])
            recent_minutes = np.mean([game.minutes_played for game in recent_games])

            basic_stats.update({
                'recent_form_rating': recent_rating if recent_rating else 7.0,
                'recent_goals': recent_goals,
                'recent_assists': recent_assists,
                'recent_minutes_avg': recent_minutes
            })
        else:
            basic_stats.update({
                'recent_form_rating': 7.0,
                'recent_goals': 0,
                'recent_assists': 0,
                'recent_minutes_avg': 90.0
            })

        return basic_stats

    except Player.DoesNotExist:
        return {
            'overall': 70, 'pace': 70, 'shooting': 70, 'passing': 70,
            'dribbling': 70, 'defending': 70, 'physical': 70,
            'rating': 7.0, 'goals_per_game': 0.0, 'assists_per_game': 0.0,
            'shots_per_game': 0.0, 'passes_accuracy': 70.0, 'duels_won_percent': 50.0,
            'tackles_success': 50.0, 'minutes_played': 0, 'matches_started': 0,
            'total_matches': 1, 'recent_form_rating': 7.0, 'recent_goals': 0,
            'recent_assists': 0, 'recent_minutes_avg': 90.0
        }


def get_opponent_analysis(player_id, opp_club_id, position_id):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ –Ω–∞ —Ç–æ–π –∂–µ –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        opp_players = Player.objects.filter(
            club_id=opp_club_id,
            primary_position_id=position_id
        )

        if opp_players.exists():
            opp_ratings = []
            for opp_player in opp_players:
                if opp_player.statistic:
                    opp_ratings.append(safe_float(getattr(opp_player.statistic, 'rating', 7.0)))

            avg_opp_strength = np.mean(opp_ratings) if opp_ratings else 7.0

            our_player = Player.objects.get(id=player_id)
            our_strength = 7.0
            if our_player.statistic:
                our_strength = safe_float(getattr(our_player.statistic, 'rating', 7.0))

            superiority = our_strength / avg_opp_strength if avg_opp_strength > 0 else 1.0

            return {
                'opp_avg_strength': avg_opp_strength / 10.0,
                'superiority_factor': min(superiority, 2.0) / 2.0,
                'position_competition': len(opp_ratings) / 5.0
            }
        else:
            return {
                'opp_avg_strength': 0.7,
                'superiority_factor': 0.5,
                'position_competition': 0.0
            }

    except Exception as e:
        return {
            'opp_avg_strength': 0.7,
            'superiority_factor': 0.5,
            'position_competition': 0.0
        }


def get_tactical_compatibility(position_id, formations=['4-2-3-1', '4-3-3', '4-4-2']):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ü–∏—è–º–∏"""
    compatibilities = []
    for formation in formations:
        if formation in TACTICAL_COMPATIBILITY:
            compatibility = TACTICAL_COMPATIBILITY[formation].get(position_id, 0.5)
            compatibilities.append(compatibility)
        else:
            compatibilities.append(0.5)

    avg_compatibility = np.mean(compatibilities)
    max_compatibility = np.max(compatibilities)

    return avg_compatibility, max_compatibility


def create_position_embedding(position_id):
    """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    position_info = POSITION_LINES.get(str(position_id), {'line': 0, 'position': 'UNK', 'order': 0})

    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ–∑–∏—Ü–∏–∏
    line_embedding = [0.0] * 7  # 7 –ª–∏–Ω–∏–π (0-6)
    line_num = position_info['line']
    if 0 <= line_num <= 6:
        line_embedding[line_num] = 1.0

    # –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
    order_normalized = min(position_info['order'] / 10.0, 1.0)

    # –¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å
    avg_tactical, max_tactical = get_tactical_compatibility(position_id)

    return line_embedding + [order_normalized, avg_tactical, max_tactical]


def create_temporal_features(game_date):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏"""
    try:
        if not game_date:
            return [0.0] * 6

        month = game_date.month
        day_of_year = game_date.timetuple().tm_yday

        # –°–µ–∑–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        is_season_start = 1.0 if month in [8, 9] else 0.0
        is_winter_break = 1.0 if month in [12, 1] else 0.0
        is_season_end = 1.0 if month in [5, 6] else 0.0

        # –¶–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å —Å–µ–∑–æ–Ω–∞
        season_cycle = np.sin(2 * np.pi * month / 12)
        year_cycle = np.sin(2 * np.pi * day_of_year / 365)

        # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        calendar_intensity = 1.0 if month in [3, 4, 10, 11] else 0.7

        return [is_season_start, is_winter_break, is_season_end, season_cycle, year_cycle, calendar_intensity]
    except:
        return [0.0] * 6


def calculate_team_chemistry(player_id, club_id):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ö–∏–º–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    try:
        player = Player.objects.get(id=player_id)

        # –ë–∞–∑–æ–≤—ã–π —Ñ–∞–∫—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
        time_factor = min(1.0, (player_id % 1000) / 1000.0)

        # –§–∞–∫—Ç–æ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        if player.statistic:
            minutes_factor = min(1.0, safe_float(player.statistic.minutes_played) / 2000.0)
            matches_factor = min(1.0, safe_float(player.statistic.matches_uppercase) / 30.0)
        else:
            minutes_factor = 0.5
            matches_factor = 0.5

        # –û–±—â–∞—è —Ö–∏–º–∏—è
        chemistry = (time_factor + minutes_factor + matches_factor) / 3.0
        return chemistry

    except:
        return 0.5


def calculate_motivation_factors(home_club_id, away_club_id, game_date, player_id):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã"""
    try:
        # –î–µ—Ä–±–∏ —Ñ–∞–∫—Ç–æ—Ä
        is_derby = 1.0 if abs(home_club_id - away_club_id) < 10 else 0.0

        # –í–∞–∂–Ω–æ—Å—Ç—å –º–∞—Ç—á–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ–∑–æ–Ω–∞
        month = game_date.month if game_date else 6
        match_importance = 1.0 if month in [4, 5, 6] else 0.8 if month in [11, 12] else 0.7

        # –õ–∏—á–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
        try:
            player = Player.objects.get(id=player_id)
            if player.statistic:
                rating = safe_float(player.statistic.rating)
                personal_motivation = 1.0 - (rating / 10.0) + 0.5
                personal_motivation = min(1.0, max(0.3, personal_motivation))
            else:
                personal_motivation = 0.7
        except:
            personal_motivation = 0.7

        return [is_derby, match_importance, personal_motivation]
    except:
        return [0.0, 0.7, 0.7]


def estimate_fitness_and_form(player_id, game_date):
    """–û—Ü–µ–Ω–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã –∏ –∏–≥—Ä–æ–≤–æ–π —Ñ–æ—Ä–º—ã"""
    try:
        player = Player.objects.get(id=player_id)

        # –ë–∞–∑–æ–≤–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞
        base_fitness = 0.8

        # –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä
        age = player.age or 25
        if 20 <= age <= 28:
            age_factor = 1.0
        elif 29 <= age <= 32:
            age_factor = 0.9
        elif age > 32:
            age_factor = 0.8
        else:
            age_factor = 0.85

        # –§–∞–∫—Ç–æ—Ä —Ç—Ä–∞–≤–º
        injury_factor = 0.5 if player.injury else 1.0

        # –ò–≥—Ä–æ–≤–∞—è —Ñ–æ—Ä–º–∞
        if player.statistic:
            rating = safe_float(player.statistic.rating)
            form_factor = rating / 10.0
        else:
            form_factor = 0.7

        # –û–±—â–∏–π —Ñ–∏—Ç–Ω–µ—Å
        fitness = (base_fitness * age_factor * injury_factor + form_factor) / 2.0
        fitness = min(1.0, max(0.1, fitness))

        return [fitness, age_factor, injury_factor, form_factor]
    except:
        return [0.8, 0.9, 1.0, 0.7]


def extract_full_49_features(player_data, opp_club_id, game_date=None):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –í–°–ï 49 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–≥—Ä–æ–∫–∞"""
    try:
        player_obj = Player.objects.get(id=player_data['id'])

        # 1. –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (4 –ø—Ä–∏–∑–Ω–∞–∫–∞)
        basic_features = [
            safe_float(player_data.get('height', 180)) / 200.0,
            safe_float(player_data.get('age', 25)) / 40.0,
            safe_float(player_data.get('number', 0)) / 100.0,
            safe_float(player_data.get('primary_position_id', 0)) / 120.0
        ]

        # 2. –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (15 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)
        player_stats = get_enhanced_player_stats(player_data['id'])
        stat_features = [
            player_stats['rating'] / 10.0,
            player_stats['goals_per_game'] / 2.0,
            player_stats['assists_per_game'] / 2.0,
            player_stats['shots_per_game'] / 5.0,
            player_stats['passes_accuracy'] / 100.0,
            player_stats['duels_won_percent'] / 100.0,
            player_stats['tackles_success'] / 100.0,
            min(player_stats['minutes_played'] / 3000.0, 1.0),
            player_stats['matches_started'] / max(player_stats['total_matches'], 1),
            player_stats['recent_form_rating'] / 10.0,
            player_stats['recent_goals'] / 5.0,
            player_stats['recent_assists'] / 5.0,
            player_stats['recent_minutes_avg'] / 90.0,
            safe_float(player_stats['overall']) / 100.0,
            (safe_float(player_stats['pace']) + safe_float(player_stats['physical'])) / 200.0
        ]

        # 3. –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ (10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)
        position_id = player_data.get('primary_position_id', 0)
        position_features = create_position_embedding(position_id)

        # 4. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ç–∏–≤ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
        opponent_analysis = get_opponent_analysis(player_data['id'], opp_club_id, position_id)
        opp_features = [
            opponent_analysis['opp_avg_strength'],
            opponent_analysis['superiority_factor'],
            min(opponent_analysis['position_competition'], 1.0)
        ]

        # 5. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (6 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)
        temporal_features = create_temporal_features(game_date)

        # 6. –•–∏–º–∏—è –∫–æ–º–∞–Ω–¥—ã (1 –ø—Ä–∏–∑–Ω–∞–∫)
        chemistry_features = [calculate_team_chemistry(player_data['id'], player_obj.club_id)]

        # 7. –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
        motivation_features = calculate_motivation_factors(
            player_obj.club_id, opp_club_id, game_date, player_data['id']
        )

        # 8. –§–∏—Ç–Ω–µ—Å –∏ —Ñ–æ—Ä–º–∞ (4 –ø—Ä–∏–∑–Ω–∞–∫–∞)
        fitness_features = estimate_fitness_and_form(player_data['id'], game_date)

        # 9. –ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏—è (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
        history_features = [
            min(player_data['id'] / 3000.0, 1.0),  # –ë–∞–∑–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            min((player_data['id'] % 100) / 100.0, 1.0),  # –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            1.0 if not player_obj.injury else 0.0  # –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
        ]

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (4+15+10+3+6+1+3+4+3 = 49 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)
        all_features = (basic_features + stat_features + position_features +
                        opp_features + temporal_features + chemistry_features +
                        motivation_features + fitness_features + history_features)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        all_features = [safe_float(f) if not (np.isnan(f) or np.isinf(f)) else 0.5 for f in all_features]

        return all_features

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player_data.get('id', 'unknown')}: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return [0.5] * 49


def predict_with_sklearn_ensemble(X):
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º sklearn –∞–Ω—Å–∞–º–±–ª—è"""
    try:
        rf_pred = rf_model.predict_proba(X)[:, 1]
        et_pred = et_model.predict_proba(X)[:, 1]
        gb_pred = gb_model.predict_proba(X)[:, 1]
        lr_pred = lr_model.predict_proba(X)[:, 1]
        nn_pred = nn_model.predict(X, verbose=0).flatten()

        # –ï—Å–ª–∏ –µ—Å—Ç—å —É–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë —Ç–æ–∂–µ
        if improved_nn_model:
            improved_nn_pred = improved_nn_model.predict(X, verbose=0).flatten()
            # –ê–Ω—Å–∞–º–±–ª–µ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
            ensemble_pred = (0.2 * rf_pred + 0.15 * et_pred + 0.15 * gb_pred +
                             0.1 * lr_pred + 0.2 * nn_pred + 0.2 * improved_nn_pred)
        else:
            # –ê–Ω—Å–∞–º–±–ª–µ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±–µ–∑ —É–ª—É—á—à–µ–Ω–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            ensemble_pred = (0.25 * rf_pred + 0.2 * et_pred + 0.2 * gb_pred +
                             0.15 * lr_pred + 0.2 * nn_pred)

        return ensemble_pred

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω—Å–∞–º–±–ª—è: {e}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Random Forest –∫–∞–∫ fallback
        return rf_model.predict_proba(X)[:, 1]


def organize_by_lines(predicted_players):
    """–û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ª–∏–Ω–∏—è–º —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–π —Ç–∞–∫—Ç–∏–∫–µ —Å –ñ–ï–°–¢–ö–ò–ú–ò –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏"""
    lines = {}

    for player in predicted_players:
        position_id = player['position_id']
        position_info = POSITION_LINES.get(str(position_id), {'line': 0, 'position': 'Unknown', 'order': 0})

        line_num = position_info['line']
        order = position_info['order']

        if line_num not in lines:
            lines[line_num] = []

        lines[line_num].append({
            'id': player['id'],
            'position_id': position_id,
            'name': player['name'],
            'probability': player.get('probability', 0.5),
            'order': order
        })

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–∞–∂–¥–æ–π –ª–∏–Ω–∏–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
    for line_num in lines:
        lines[line_num].sort(key=lambda x: x['order'])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¢–û–õ–¨–ö–û –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª–∏–Ω–∏–π
    result = []
    total_players = 0

    for line_num in sorted(lines.keys()):
        if line_num > 0:  # –¢–æ–ª—å–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ª–∏–Ω–∏–∏ (–∏—Å–∫–ª—é—á–∞–µ–º 0)
            line_players = []
            for player in lines[line_num]:
                line_players.append({
                    'id': player['id'],
                    'position_id': player['position_id'],
                    'name': player['name']
                })
                total_players += 1
            if line_players:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –ª–∏–Ω–∏–∏
                result.append(line_players)

    print(f"üîç organize_by_lines: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_players} –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ {len(predicted_players)}")

    # –ö–†–ò–¢–ò–ß–ù–û: –ï—Å–ª–∏ –ø–æ—Ç–µ—Ä—è–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
    if total_players < len(predicted_players):
        unknown_players = []
        processed_ids = set()
        for line in result:
            for player in line:
                processed_ids.add(player['id'])

        for player in predicted_players:
            if player['id'] not in processed_ids:
                unknown_players.append({
                    'id': player['id'],
                    'position_id': player['position_id'],
                    'name': player['name']
                })
                print(f"‚ö†Ô∏è –ò–≥—Ä–æ–∫ —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏–Ω–∏–µ–π: {player['name']} (–ø–æ–∑–∏—Ü–∏—è {player['position_id']})")

        if unknown_players:
            result.append(unknown_players)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
            total_players += len(unknown_players)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(unknown_players)} –∏–≥—Ä–æ–∫–æ–≤")

    print(f"üìä –ò—Ç–æ–≥–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {total_players} –∏–≥—Ä–æ–∫–æ–≤")
    return result


def compare_with_actual_sklearn(game, club, is_home, predicted_lineup):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Å—Ç–∞–≤–æ–º (–∏—Å–∫–ª—é—á–∞—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏–∏ 1-10, –∫—Ä–æ–º–µ –≤—Ä–∞—Ç–∞—Ä—è)"""
    try:
        actual_placement = game.home_club_placement if is_home else game.away_club_placement

        if not actual_placement:
            print("\nüìã –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return 0.0

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ (–±–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏–π 1-10, –∫—Ä–æ–º–µ –≤—Ä–∞—Ç–∞—Ä—è)
        actual_players = []
        print(f"\nüìã –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –°–û–°–¢–ê–í (–∏—Å–∫–ª—é—á–∞—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏–∏ 1-10, –∫—Ä–æ–º–µ –≤—Ä–∞—Ç–∞—Ä—è):")
        print("=" * 50)

        excluded_positions = list(EXCLUDED_POSITIONS)
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ 1-10, –Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º 11 (–≤—Ä–∞—Ç–∞—Ä—å)
        for pos_id in range(1, 11):
            if pos_id != 11:
                excluded_positions.append(pos_id)

        pos = 1
        for row in actual_placement:
            for cell in row:
                player_id = cell.get("id")
                position_id = cell.get("position_id")

                if (player_id and position_id not in excluded_positions and
                    (position_id == 11 or position_id >= 11)):
                    actual_players.append(player_id)

                    try:
                        player_obj = Player.objects.get(id=player_id)
                        print(f"{pos:2d}. {player_obj.name} {player_obj.surname} (–ø–æ–∑–∏—Ü–∏—è {position_id})")
                        pos += 1
                    except:
                        print(f"{pos:2d}. –ò–≥—Ä–æ–∫ ID: {player_id} (–ø–æ–∑–∏—Ü–∏—è {position_id})")
                        pos += 1

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
        predicted_players = [p['id'] for p in predicted_lineup]
        matches = set(predicted_players) & set(actual_players)
        accuracy = len(matches) / len(actual_players) if actual_players else 0

        print(f"\nüìä SKLEARN + –í–ê–õ–ò–î–ê–¶–ò–Ø –ê–ù–ê–õ–ò–ó –¢–û–ß–ù–û–°–¢–ò:")
        print(f"    –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {len(predicted_players)}")
        print(f"    –§–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(actual_players)}")
        print(f"    –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}")
        print(f"    üéØ –¢–û–ß–ù–û–°–¢–¨: {accuracy:.1%}")
        print(f"    üîí –ò—Å–∫–ª—é—á–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ 1-10 (–∫—Ä–æ–º–µ –≤—Ä–∞—Ç–∞—Ä—è 11)")

        if matches:
            print(f"\n‚úÖ –£–ì–ê–î–ê–ù–ù–´–ï –ò–ì–†–û–ö–ò ({len(matches)}):")
            for player_id in matches:
                try:
                    player_obj = Player.objects.get(id=player_id)
                    pred_player = next((p for p in predicted_lineup if p['id'] == player_id), None)
                    prob = pred_player['probability'] if pred_player else 0
                    pos_id = pred_player['position_id'] if pred_player else 0
                    print(f"    ‚úÖ {player_obj.name} {player_obj.surname} (–ø–æ–∑–∏—Ü–∏—è {pos_id}, {prob:.1%})")
                except:
                    print(f"    ‚úÖ –ò–≥—Ä–æ–∫ ID: {player_id}")

        # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if accuracy >= 0.8:
            print(f"\nüèÜ –ü–†–ï–í–û–°–•–û–î–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! {accuracy:.1%}")
        elif accuracy >= 0.7:
            print(f"\nüî• –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! {accuracy:.1%}")
        elif accuracy >= 0.6:
            print(f"\n‚úÖ –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! {accuracy:.1%}")
        else:
            print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢ {accuracy:.1%} - –º–æ–¥–µ–ª—å —É—á–∏—Ç—Å—è")

        return accuracy

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
        return 0.0


def fix_incomplete_lineup(predicted_lineup, lineup_by_lines, game_id, is_home):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–ø–æ–ª–Ω—ã–π —Å–æ—Å—Ç–∞–≤, –¥–æ–±–∞–≤–ª—è—è –¢–û–õ–¨–ö–û –ê–ö–¢–ò–í–ù–´–• –∏–≥—Ä–æ–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
        actual_count = len(predicted_lineup)
        lines_count = sum(len(line) for line in lineup_by_lines)

        print(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–∞–≤–∞:")
        print(f"    –ò–≥—Ä–æ–∫–æ–≤ –≤ predicted_lineup: {actual_count}")
        print(f"    –ò–≥—Ä–æ–∫–æ–≤ –≤ lineup_by_lines: {lines_count}")

        if actual_count == lines_count and actual_count >= 11:
            print("‚úÖ –°–æ—Å—Ç–∞–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            return predicted_lineup, lineup_by_lines

        if actual_count == lines_count and lines_count < 11:
            print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ê–ö–¢–ò–í–ù–´–• –∏–≥—Ä–æ–∫–æ–≤: {lines_count}")
            print("üîí –°–¢–†–û–ì–û–ï –ü–†–ê–í–ò–õ–û: –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤")
            return predicted_lineup, lineup_by_lines

        if actual_count != lines_count:
            print("üîÑ –ü—Ä–æ–±–ª–µ–º–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –ª–∏–Ω–∏—è–º, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
            # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø–æ –ª–∏–Ω–∏—è–º
            new_lineup_by_lines = organize_by_lines(predicted_lineup)
            return predicted_lineup, new_lineup_by_lines

        game = Game.objects.get(pk=game_id)
        club = game.home_club if is_home else game.away_club
        opp = game.away_club if is_home else game.home_club

        needed = 11 - actual_count
        print(f"üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–ê–í–ê: –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å {needed} –ê–ö–¢–ò–í–ù–´–• –∏–≥—Ä–æ–∫–æ–≤")

        # –ü–æ–ª—É—á–∞–µ–º –¢–û–õ–¨–ö–û –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã (–∏—Å–∫–ª—é—á–∞—è –ø–æ–∑–∏—Ü–∏–∏ 1-10, –∫—Ä–æ–º–µ –≤—Ä–∞—Ç–∞—Ä—è)
        excluded_positions = list(EXCLUDED_POSITIONS)
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ 1-10, –Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º 11 (–≤—Ä–∞—Ç–∞—Ä—å)
        for pos_id in range(1, 11):
            if pos_id != 11 and pos_id not in excluded_positions:
                excluded_positions.append(pos_id)

        all_squad_raw = Player.objects.filter(club=club).exclude(
            primary_position_id__in=excluded_positions
        ).values('id', 'name', 'surname', 'primary_position_id', 'height', 'age', 'number')

        all_squad = []
        for player in all_squad_raw:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            pos_id = player['primary_position_id'] or 0
            if pos_id == 11 or pos_id >= 11:  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Ä–∞—Ç–∞—Ä–µ–π (11) –∏ –ø–æ–∑–∏—Ü–∏–∏ >= 11
                all_squad.append(player)

        # ID —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        used_ids = {p['id'] for p in predicted_lineup}

        # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ê–ö–¢–ò–í–ù–´–• –∏–≥—Ä–æ–∫–æ–≤
        available_players = []
        for player in all_squad:
            if player['id'] not in used_ids and has_played_this_season(player['id']):
                safe_player = {
                    'id': player['id'],
                    'name': player['name'] or 'Unknown',
                    'surname': player['surname'] or 'Player',
                    'primary_position_id': player['primary_position_id'] or 0,
                    'height': player['height'] if player['height'] is not None else 180,
                    'age': player['age'] if player['age'] is not None else 25,
                    'number': player['number'] if player['number'] is not None else 0
                }
                available_players.append(safe_player)

        if not available_players:
            print("‚ö†Ô∏è –ù–ï–¢ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ê–ö–¢–ò–í–ù–´–• –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!")
            print("üîí –°–¢–†–û–ì–û–ï –ü–†–ê–í–ò–õ–û: –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤")
            print(f"üìä –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–∞–≤ –∏–∑ {actual_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤")
            return predicted_lineup, lineup_by_lines
        else:
            print(f"ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(available_players)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ê–ö–¢–ò–í–ù–´–• –∏–≥—Ä–æ–∫–æ–≤...")
            print(f"üîí –ò—Å–∫–ª—é—á–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ 1-10 (–∫—Ä–æ–º–µ –≤—Ä–∞—Ç–∞—Ä—è 11)")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
            player_features = []
            valid_players = []

            for player in available_players:
                try:
                    features = extract_full_49_features(player, opp.id, game.game_date)
                    if len(features) == config['input_dim']:
                        player_features.append(features)
                        valid_players.append(player)
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä–æ–∫–∞ {player['name']}: {e}")
                    continue

            if player_features:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ò–ò
                X = np.array(player_features, dtype=np.float32)
                X_scaled = scaler.transform(X)
                probabilities = predict_with_sklearn_ensemble(X_scaled)

                # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏
                candidates = []
                for i, player in enumerate(valid_players):
                    prob = float(probabilities[i])

                    try:
                        player_obj = Player.objects.get(id=player['id'])
                        primary_pos = player_obj.primary_position.name if player_obj.primary_position else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        injury_status = "ü§ï –¢—Ä–∞–≤–º–∞" if player_obj.injury else "‚úÖ –ó–¥–æ—Ä–æ–≤"
                        overall = 70
                        if player_obj.statistic:
                            overall = safe_float(getattr(player_obj.statistic, 'rating', 7.0)) * 10
                    except:
                        primary_pos = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        injury_status = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        overall = 70

                    candidate = {
                        'id': player['id'],
                        'name': f"{player['name']} {player['surname']}",
                        'position_id': player['primary_position_id'],
                        'position_name': primary_pos,
                        'probability': prob,
                        'injury_status': injury_status,
                        'overall': overall,
                        'age': player['age'],
                        'number': player['number']
                    }
                    candidates.append(candidate)

                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ª—É—á—à–∏—Ö
                candidates.sort(key=lambda x: x['probability'], reverse=True)

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ê–ö–¢–ò–í–ù–´–• –∏–≥—Ä–æ–∫–æ–≤
                added = 0
                for candidate in candidates:
                    if added >= needed:
                        break
                    predicted_lineup.append(candidate)
                    added += 1
                    print(
                        f"  ‚ûï –ò–ò –¥–æ–±–∞–≤–∏–ª –ê–ö–¢–ò–í–ù–û–ì–û: {candidate['name']} - –ø–æ–∑–∏—Ü–∏—è {candidate['position_id']} ({candidate['probability']:.1%})")

                if added < needed:
                    print(f"‚ö†Ô∏è –£–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ {added} –∏–∑ {needed} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤")
                else:
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added} –ê–ö–¢–ò–í–ù–´–• –∏–≥—Ä–æ–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò")
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ê–ö–¢–ò–í–ù–´–• –∏–≥—Ä–æ–∫–æ–≤")

        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º lineup_by_lines —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–∞–≤–æ–º
        new_lineup_by_lines = organize_by_lines(predicted_lineup)

        final_count = len(predicted_lineup)
        print(f"üîÑ –°–æ—Å—Ç–∞–≤ –æ–±–Ω–æ–≤–ª–µ–Ω: {final_count} –ê–ö–¢–ò–í–ù–´–• –∏–≥—Ä–æ–∫–æ–≤")
        if final_count < 11:
            print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ {final_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ")

        return predicted_lineup, new_lineup_by_lines

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞: {e}")
        return predicted_lineup, lineup_by_lines


# ============ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø ============
def predict_sklearn_lineup(game_id, is_home=True):
    """Sklearn –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ —Å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ø–æ minutes_played"""
    try:
        game = Game.objects.get(pk=game_id)
        club = game.home_club if is_home else game.away_club
        opp = game.away_club if is_home else game.home_club

        print(f"\nüéØ SKLEARN –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï (–î–û–ü–û–õ–ù–ï–ù–ò–ï –ü–û MINUTES_PLAYED) –¥–ª—è {club.name} –ø—Ä–æ—Ç–∏–≤ {opp.name}")
        print(f"üìÖ –ò–≥—Ä–∞: {game.game_date}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã (–∏—Å–∫–ª—é—á–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –ò –ø–æ–∑–∏—Ü–∏–∏ 1-10, –∫—Ä–æ–º–µ –≤—Ä–∞—Ç–∞—Ä—è)
        excluded_positions = list(EXCLUDED_POSITIONS)
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ 1-10, –Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º 11 (–≤—Ä–∞—Ç–∞—Ä—å)
        for pos_id in range(1, 11):
            if pos_id != 11 and pos_id not in excluded_positions:
                excluded_positions.append(pos_id)

        squad_raw = Player.objects.filter(club=club).exclude(
            primary_position_id__in=excluded_positions
        ).values('id', 'name', 'surname', 'primary_position_id', 'height', 'age', 'number')

        squad = []
        for player in squad_raw:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            pos_id = player['primary_position_id'] or 0
            if pos_id == 11 or pos_id >= 11:  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Ä–∞—Ç–∞—Ä–µ–π (11) –∏ –ø–æ–∑–∏—Ü–∏–∏ >= 11
                safe_player = {
                    'id': player['id'],
                    'name': player['name'] or 'Unknown',
                    'surname': player['surname'] or 'Player',
                    'primary_position_id': pos_id,
                    'height': player['height'] if player['height'] is not None else 180,
                    'age': player['age'] if player['age'] is not None else 25,
                    'number': player['number'] if player['number'] is not None else 0
                }
                squad.append(safe_player)

        print(f"üìã –ò—Å—Ö–æ–¥–Ω—ã–π —Å–æ—Å—Ç–∞–≤: {len(squad)} –∏–≥—Ä–æ–∫–æ–≤ (–∏—Å–∫–ª—é—á–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ 1-10, –∫—Ä–æ–º–µ –≤—Ä–∞—Ç–∞—Ä—è)")

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∏–≥—Ä–æ–≤–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        active_squad = filter_players_with_game_time(squad)

        if len(active_squad) < 1:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤")
            return [], [], 0.0

        squad = active_squad
        print(f"üìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(squad)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ sklearn –∞–Ω—Å–∞–º–±–ª–µ–º...")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        player_features = []
        valid_players = []

        for player in squad:
            try:
                features = extract_full_49_features(player, opp.id, game.game_date)
                if len(features) == config['input_dim']:
                    player_features.append(features)
                    valid_players.append(player)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä–æ–∫–∞ {player['name']}: {e}")
                continue

        if not player_features:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞")
            return [], [], 0.0

        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(player_features)} –∏–≥—Ä–æ–∫–æ–≤")

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        X = np.array(player_features, dtype=np.float32)
        X_scaled = scaler.transform(X)

        print("ü§ñ Sklearn –∞–Ω—Å–∞–º–±–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–∫–æ–≤...")
        probabilities = predict_with_sklearn_ensemble(X_scaled)

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = []
        for i, player in enumerate(valid_players):
            prob = float(probabilities[i])

            try:
                player_obj = Player.objects.get(id=player['id'])
                primary_pos = player_obj.primary_position.name if player_obj.primary_position else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                injury_status = "ü§ï –¢—Ä–∞–≤–º–∞" if player_obj.injury else "‚úÖ –ó–¥–æ—Ä–æ–≤"
                overall = 70
                if player_obj.statistic:
                    overall = safe_float(getattr(player_obj.statistic, 'rating', 7.0)) * 10
            except:
                primary_pos = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                injury_status = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                overall = 70

            results.append({
                'id': player['id'],
                'name': f"{player['name']} {player['surname']}",
                'position_id': player['primary_position_id'],
                'position_name': primary_pos,
                'probability': prob,
                'injury_status': injury_status,
                'overall': overall,
                'age': player['age'],
                'number': player['number']
            })

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        results.sort(key=lambda x: x['probability'], reverse=True)

        # –í—ã–±–æ—Ä –≤—Ä–∞—Ç–∞—Ä—è
        print("üîß –í—ã–±–∏—Ä–∞–µ–º –≤—Ä–∞—Ç–∞—Ä—è...")
        goalkeepers = [p for p in results if p['position_id'] == 11]
        field_players = [p for p in results if p['position_id'] != 11]

        if goalkeepers:
            best_gk = goalkeepers[0]
            print(f"‚úÖ –í—Ä–∞—Ç–∞—Ä—å: {best_gk['name']} ({best_gk['probability']:.1%})")
        else:
            print("‚ùå –í—Ä–∞—Ç–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return [], [], 0.0

        # –ê–Ω–∞–ª–∏–∑ —á–µ—Ç–Ω–æ—Å—Ç–∏ –ª–∏–Ω–∏–π
        print("üîß –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ç–Ω–æ—Å—Ç—å –ª–∏–Ω–∏–π...")

        line_players = {
            2: {'even': [], 'odd': []},  # –ó–∞—â–∏—Ç–Ω–∏–∫–∏
            4: {'even': [], 'odd': []},  # –ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫–∏
            5: {'even': [], 'odd': []},  # –ê—Ç–∞–∫—É—é—â–∏–µ
            6: {'even': [], 'odd': []}  # –ù–∞–ø–∞–¥–∞—é—â–∏–µ
        }

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ª–∏–Ω–∏—è–º –∏ —á–µ—Ç–Ω–æ—Å—Ç–∏
        for player in field_players:
            position_id = player['position_id']
            position_info = POSITION_LINES.get(str(position_id), {'line': 0})
            line_num = position_info['line']

            if line_num in line_players:
                if position_id % 2 == 0:
                    line_players[line_num]['even'].append(player)
                else:
                    line_players[line_num]['odd'].append(player)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        for line_num in line_players:
            line_players[line_num]['even'].sort(key=lambda x: x['probability'], reverse=True)
            line_players[line_num]['odd'].sort(key=lambda x: x['probability'], reverse=True)

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —á–µ—Ç–Ω–æ—Å—Ç–∏
        line_quality = {}
        for line_num in line_players:
            even_quality = sum(p['probability'] for p in line_players[line_num]['even'][:4])
            odd_quality = sum(p['probability'] for p in line_players[line_num]['odd'][:4])

            line_quality[line_num] = {
                'even': even_quality,
                'odd': odd_quality,
                'chosen': 'even' if even_quality >= odd_quality else 'odd'
            }

        print(f"üìä –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —á–µ—Ç–Ω–æ—Å—Ç–∏ –ø–æ –ª–∏–Ω–∏—è–º:")
        line_names = {2: "–ó–∞—â–∏—Ç–Ω–∏–∫–∏", 4: "–ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫–∏", 5: "–ê—Ç–∞–∫—É—é—â–∏–µ", 6: "–ù–∞–ø–∞–¥–∞—é—â–∏–µ"}
        for line_num, quality in line_quality.items():
            parity_text = "—á–µ—Ç–Ω—ã–µ" if quality['chosen'] == 'even' else "–Ω–µ—á–µ—Ç–Ω—ã–µ"
            print(f"    {line_names[line_num]}: {parity_text} (–∫–∞—á–µ—Å—Ç–≤–æ: {quality[quality['chosen']]:.2f})")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ —Å –∂–µ—Å—Ç–∫–∏–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
        print("üîí –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤...")

        consistent_lineup = []
        used_players = set()
        used_positions = set()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–∞—Ç–∞—Ä—è
        consistent_lineup.append(best_gk)
        used_players.add(best_gk['id'])
        used_positions.add(best_gk['position_id'])
        print(f"  ‚úÖ {best_gk['name']} - –≤—Ä–∞—Ç–∞—Ä—å, –ø–æ–∑–∏—Ü–∏—è {best_gk['position_id']}")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        target_counts = {2: 3, 4: 4, 5: 1, 6: 2}

        for line_num in [2, 4, 5, 6]:
            chosen_parity = line_quality[line_num]['chosen']
            available_players = line_players[line_num][chosen_parity]
            target_count = target_counts[line_num]

            added_count = 0
            for player in available_players:
                if (player['id'] not in used_players and
                        player['position_id'] not in used_positions and
                        added_count < target_count and
                        len(consistent_lineup) < 11):
                    consistent_lineup.append(player)
                    used_players.add(player['id'])
                    used_positions.add(player['position_id'])
                    added_count += 1
                    print(f"  ‚úÖ {player['name']} - –ª–∏–Ω–∏—è {line_num}, –ø–æ–∑–∏—Ü–∏—è {player['position_id']}")

        print(f"üî¢ –û—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤: {len(consistent_lineup)} –∏–≥—Ä–æ–∫–æ–≤")

        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –î–æ–ø–æ–ª–Ω—è–µ–º —Å–æ—Å—Ç–∞–≤ –ø–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º –ø–æ–∑–∏—Ü–∏—è–º —á–µ—Ä–µ–∑ minutes_played
        if len(consistent_lineup) < 11:
            print(f"\nüéØ –î–û–ü–û–õ–ù–ï–ù–ò–ï –ü–û –ù–ï–î–û–°–¢–ê–Æ–©–ò–ú –ü–û–ó–ò–¶–ò–Ø–ú (minutes_played)")
            consistent_lineup = find_players_for_missing_positions(
                consistent_lineup, squad, used_players, used_positions, line_quality, game.game_date
            )

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–π
        final_positions = [p['position_id'] for p in consistent_lineup]
        unique_positions = set(final_positions)

        if len(final_positions) != len(unique_positions):
            print("üö® –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
            consistent_lineup = remove_position_duplicates(consistent_lineup)

        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 11 –µ—Å–ª–∏ –±–æ–ª—å—à–µ
        if len(consistent_lineup) > 11:
            print(f"‚úÇÔ∏è –û–±—Ä–µ–∑–∞–µ–º –¥–æ 11 –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤")
            consistent_lineup.sort(key=lambda x: x['probability'], reverse=True)
            consistent_lineup = consistent_lineup[:11]

        print(f"üèÅ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {len(consistent_lineup)} –∏–≥—Ä–æ–∫–æ–≤")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        final_positions = [p['position_id'] for p in consistent_lineup]
        unique_positions = set(final_positions)

        print(f"üî¢ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
        print(f"    –ò–≥—Ä–æ–∫–æ–≤ –≤ —Å–æ—Å—Ç–∞–≤–µ: {len(consistent_lineup)}")
        print(f"    –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(unique_positions)}")
        print(f"    –ü–æ–∑–∏—Ü–∏–∏: {sorted(final_positions)}")

        if len(final_positions) == len(unique_positions):
            print("‚úÖ –í–°–ï –ü–û–ó–ò–¶–ò–ò –£–ù–ò–ö–ê–õ–¨–ù–´!")
        else:
            print("‚ùå –ï–°–¢–¨ –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–ï –ü–û–ó–ò–¶–ò–ò!")

        predicted_lineup = consistent_lineup

        # –û—Ä–≥–∞–Ω–∏–∑—É–µ–º –ø–æ –ª–∏–Ω–∏—è–º
        lineup_by_lines = organize_by_lines(predicted_lineup)

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–û–ï –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï (–î–û–ü–û–õ–ù–ï–ù–ò–ï –ü–û MINUTES_PLAYED):")
        print("=" * 70)

        for i, line in enumerate(lineup_by_lines):
            line_num = i + 1
            line_names_display = {1: "ü•Ö –í—Ä–∞—Ç–∞—Ä—å", 2: "üõ°Ô∏è –ó–∞—â–∏—Ç–Ω–∏–∫–∏", 3: "‚öñÔ∏è –û–ø–æ—Ä–Ω—ã–µ –ø–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫–∏",
                                  4: "‚öΩ –ü–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫–∏", 5: "üî• –ê—Ç–∞–∫—É—é—â–∏–µ –ø–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫–∏", 6: "‚ö° –ù–∞–ø–∞–¥–∞—é—â–∏–µ"}

            print(f"\n{line_names_display.get(line_num, f'–õ–∏–Ω–∏—è {line_num}')}:")
            for player in line:
                player_info = next((p for p in predicted_lineup if p['id'] == player['id']), None)
                if player_info:
                    conf_icon = "üî•" if player_info['probability'] > 0.8 else "‚úÖ" if player_info[
                                                                                        'probability'] > 0.6 else "‚ö†Ô∏è"
                    minutes = player_info.get('minutes_played', 0)
                    minutes_text = f" ({minutes} –º–∏–Ω)" if minutes > 0 else ""
                    print(f"  {conf_icon} {player['name']} - –ø–æ–∑–∏—Ü–∏—è {player_info['position_id']}{minutes_text}")

        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"    –ò–≥—Ä–æ–∫–æ–≤ –≤ —Å–æ—Å—Ç–∞–≤–µ: {len(predicted_lineup)}")
        total_confidence = sum([p['probability'] for p in predicted_lineup])
        avg_confidence = total_confidence / len(predicted_lineup) if predicted_lineup else 0
        print(f"    –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.1%}")
        print(f"    –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(set(p['position_id'] for p in predicted_lineup))}")

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Å—Ç–∞–≤–æ–º
        accuracy = compare_with_actual_sklearn(game, club, is_home, predicted_lineup)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        return predict_with_validation(predicted_lineup, lineup_by_lines, accuracy, club, game)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return [], [], 0.0


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=== –ò–¢–û–ì–û–í–´–ô SKLEARN AI + –ñ–ï–°–¢–ö–ò–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø ===")
    print("üéØ –ê–Ω—Å–∞–º–±–ª—å –∏–∑ 5+ –º–æ–¥–µ–ª–µ–π + –∂–µ—Å—Ç–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è")
    print("üîí –ì–∞—Ä–∞–Ω—Ç–∏–∏:")
    print("    ‚úÖ –¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ —Å –∏–≥—Ä–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –≤ —Å–µ–∑–æ–Ω–µ")
    print("    ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ position_id –≤ —Å–æ—Å—Ç–∞–≤–µ (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)")
    print("    ‚úÖ –°—Ç—Ä–æ–≥–∞—è —á–µ—Ç–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π –ø–æ –ª–∏–Ω–∏—è–º")
    print("    ‚úÖ –†–æ–≤–Ω–æ 11 –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏—Ç–æ–≥–æ–≤–æ–º —Å–æ—Å—Ç–∞–≤–µ")

    while True:
        print("\nüéÆ –í–´–ë–ï–†–ò–¢–ï –†–ï–ñ–ò–ú:")
        print("1. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –∂–µ—Å—Ç–∫–∏–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏")
        print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏ –ø–æ–∑–∏—Ü–∏—é")
        print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è –∏–≥—Ä–æ–∫–∞")
        print("4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        print("5. –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        print("6. –í—ã—Ö–æ–¥")

        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-6): ").strip()

        if choice == "1":
            try:
                game_id = input("ID –∏–≥—Ä—ã: ").strip()
                if not game_id.isdigit():
                    print("‚ùå ID –∏–≥—Ä—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                    continue

                is_home = input("–î–æ–º–∞—à–Ω—è—è –∫–æ–º–∞–Ω–¥–∞? (y/n): ").strip().lower() == "y"
                predicted_lineup, lineup_by_lines, accuracy = predict_sklearn_lineup(int(game_id), is_home)

                # –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú —á—Ç–æ –í–°–ï–ì–î–ê –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if not predicted_lineup or len(predicted_lineup) != 11:
                    print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–ø–æ–ª–Ω—ã–π —Å–æ—Å—Ç–∞–≤!")
                    print(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {len(predicted_lineup) if predicted_lineup else 0}")
                    if predicted_lineup and len(predicted_lineup) > 0:
                        print("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
                        for player in predicted_lineup:
                            print(f"  - {player['name']} (–ø–æ–∑–∏—Ü–∏—è {player['position_id']})")
                    continue

                if lineup_by_lines:
                    print(f"\nüìã –§–û–†–ú–ê–¢ –î–õ–Ø –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–Ø (–ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û 11 –ò–ì–†–û–ö–û–í):")
                    print("=" * 60)
                    print("lineup_by_lines = [")
                    for line in lineup_by_lines:
                        print("    [", end="")
                        for i, player in enumerate(line):
                            if i > 0:
                                print(", ", end="")
                            print(
                                f'{{"id": {player["id"]}, "position_id": {player["position_id"]}, "name": "{player["name"]}"}}',
                                end="")
                        print("],")
                    print("]")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                    all_positions = []
                    for line in lineup_by_lines:
                        for player in line:
                            all_positions.append(player["position_id"])

                    print(f"\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô:")
                    print(f"    –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(all_positions)} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 11)")
                    print(f"    –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(set(all_positions))} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ‚â§11)")
                    print(f"    –ü–æ–∑–∏—Ü–∏–∏: {sorted(all_positions)}")

                    if len(all_positions) == 11:
                        print("‚úÖ –ö–û–õ–ò–ß–ï–°–¢–í–û –ò–ì–†–û–ö–û–í –ö–û–†–†–ï–ö–¢–ù–û!")
                        if len(set(all_positions)) == 11:
                            print("‚úÖ –í–°–ï –ü–û–ó–ò–¶–ò–ò –£–ù–ò–ö–ê–õ–¨–ù–´!")
                        else:
                            print(f"‚ö†Ô∏è –ï—Å—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (—ç—Ç–æ –¥–æ–ø—É—Å—Ç–∏–º–æ)")
                    elif len(all_positions) < 11:
                        print(f"‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ò–ì–†–û–ö–û–í! ({len(all_positions)} –∏–∑ 11)")
                        print("üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –¥–æ–ø–æ–ª–Ω—è–µ–º —Å–æ—Å—Ç–∞–≤ –¥–æ 11 –∏–≥—Ä–æ–∫–æ–≤...")

                        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Ç—É–∞—Ü–∏—é —Å –Ω–µ–ø–æ–ª–Ω—ã–º —Å–æ—Å—Ç–∞–≤–æ–º
                        predicted_lineup, lineup_by_lines = fix_incomplete_lineup(
                            predicted_lineup, lineup_by_lines, int(game_id), is_home
                        )

                        # –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                        all_positions = []
                        for line in lineup_by_lines:
                            for player in line:
                                all_positions.append(player["position_id"])

                        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
                        print(f"    –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(all_positions)}")
                        print(f"    –ü–æ–∑–∏—Ü–∏–∏: {sorted(all_positions)}")

                        if len(all_positions) == 11:
                            print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –¢–µ–ø–µ—Ä—å —Ä–æ–≤–Ω–æ 11 –∏–≥—Ä–æ–∫–æ–≤!")
                        elif len(all_positions) < 11:
                            print(f"‚ö†Ô∏è –¢–æ–ª—å–∫–æ {len(all_positions)} –ê–ö–¢–ò–í–ù–´–• –∏–≥—Ä–æ–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ")
                            print("üîí –°–¢–†–û–ì–û–ï –°–û–ë–õ–Æ–î–ï–ù–ò–ï: —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ —Å –∏–≥—Ä–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º")
                        else:
                            print(f"‚ö†Ô∏è –ü–æ–ª—É—á–∏–ª–æ—Å—å {len(all_positions)} –∏–≥—Ä–æ–∫–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    else:
                        print(f"‚ö†Ô∏è –°–õ–ò–®–ö–û–ú –ú–ù–û–ì–û –ò–ì–†–û–ö–û–í! ({len(all_positions)} > 11)")
                        print("‚úÇÔ∏è –û–±—Ä–µ–∑–∞–µ–º –¥–æ 11 –ª—É—á—à–∏—Ö...")

                    save_format = input("\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª? (y/n): ").strip().lower() == "y"
                    if save_format:
                        try:
                            game = Game.objects.get(pk=int(game_id))
                            club_name = (game.home_club if is_home else game.away_club).name
                            filename = f"validated_lineup_game_{game_id}_{club_name.replace(' ', '_')}.json"

                            output_data = {
                                'game_id': int(game_id),
                                'club_name': club_name,
                                'is_home': is_home,
                                'accuracy': float(accuracy) if accuracy else None,
                                'lineup_by_lines': lineup_by_lines,
                                'predicted_lineup': predicted_lineup,
                                'model_type': 'sklearn_ensemble_strict_constraints',
                                'features_count': config['input_dim'],
                                'constraints_validated': {
                                    'total_players': len(all_positions),
                                    'unique_positions': len(set(all_positions)),
                                    'all_active_players': True,  # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏
                                    'strict_constraints_followed': True
                                }
                            }

                            with open(filename, 'w', encoding='utf-8') as f:
                                json.dump(output_data, f, indent=2, ensure_ascii=False)
                            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {filename}")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                else:
                    print("‚ùå –°–æ—Å—Ç–∞–≤ —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –ø–æ –ª–∏–Ω–∏—è–º!")
                    print("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä—è–º–æ–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:")
                    for i, player in enumerate(predicted_lineup, 1):
                        print(f"{i:2d}. {player['name']} - –ø–æ–∑–∏—Ü–∏—è {player['position_id']}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        elif choice == "2":
            try:
                player_id = int(input("ID –∏–≥—Ä–æ–∫–∞: "))
                position_id = int(input("ID –ø–æ–∑–∏—Ü–∏–∏: "))

                can_play = check_player_position_compatibility(player_id, position_id)

                try:
                    player = Player.objects.get(id=player_id)
                    player_name = f"{player.name} {player.surname}"

                    try:
                        position = Position.objects.get(id=position_id)
                        position_name = position.name
                    except Position.DoesNotExist:
                        position_name = f"Position_{position_id}"

                    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò:")
                    print(f"    –ò–≥—Ä–æ–∫: {player_name}")
                    print(f"    –ü–æ–∑–∏—Ü–∏—è: {position_name}")

                    if can_play:
                        print(f"    ‚úÖ –ú–û–ñ–ï–¢ –∏–≥—Ä–∞—Ç—å –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏")
                    else:
                        print(f"    ‚ùå –ù–ï –ú–û–ñ–ï–¢ –∏–≥—Ä–∞—Ç—å –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏")

                except Player.DoesNotExist:
                    print(f"‚ùå –ò–≥—Ä–æ–∫ —Å ID {player_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ ID")

        elif choice == "3":
            try:
                player_id = int(input("ID –∏–≥—Ä–æ–∫–∞: "))

                has_time = has_played_this_season(player_id)

                try:
                    player = Player.objects.get(id=player_id)
                    player_name = f"{player.name} {player.surname}"

                    print(f"\n‚è±Ô∏è –ü–†–û–í–ï–†–ö–ê –ò–ì–†–û–í–û–ì–û –í–†–ï–ú–ï–ù–ò:")
                    print(f"    –ò–≥—Ä–æ–∫: {player_name}")

                    if has_time:
                        print(f"    ‚úÖ –ò–ì–†–ê–õ –≤ —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ")

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        if player.statistic:
                            minutes = safe_float(getattr(player.statistic, 'minutes_played', 0))
                            matches = safe_float(getattr(player.statistic, 'matches_uppercase', 0))
                            print(f"    üìä –ú–∏–Ω—É—Ç —Å—ã–≥—Ä–∞–Ω–æ: {minutes}")
                            print(f"    üìä –ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ: {matches}")
                    else:
                        print(f"    ‚ùå –ù–ï –ò–ì–†–ê–õ –≤ —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ")
                        print(f"    üö´ –ë—É–¥–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")

                except Player.DoesNotExist:
                    print(f"‚ùå –ò–≥—Ä–æ–∫ —Å ID {player_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID")

        elif choice == "4":
            print(f"\nüìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï:")
            print("=" * 60)
            print(f"üéØ –¢–∏–ø: Sklearn –∞–Ω—Å–∞–º–±–ª—å + –ñ–ï–°–¢–ö–ò–ï –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
            print(f"üß† –ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏: RF + ET + GB + LR + NN")
            if improved_nn_model:
                print(f"üöÄ –£–ª—É—á—à–µ–Ω–Ω–∞—è NN: –í–∫–ª—é—á–µ–Ω–∞ (attention + residual)")
            else:
                print(f"‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–Ω–∞—è NN: –ù–µ –Ω–∞–π–¥–µ–Ω–∞")
            print(f"üìè –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {config['input_dim']}")
            print(f"üèÜ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {config['best_model']}")
            print(f"üìà –õ—É—á—à–∏–π AUC: {config.get('best_score', 0):.1%}")
            print(f"\nüîí –ñ–ï–°–¢–ö–ò–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:")
            print(f"    ‚úÖ –¢–û–õ–¨–ö–û –∏–≥—Ä–æ–∫–∏ —Å –∏–≥—Ä–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –≤ —Å–µ–∑–æ–Ω–µ")
            print(f"    ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ position_id –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π –ª–∏–Ω–∏–∏")
            print(f"    ‚úÖ –ß–µ—Ç–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π –ø–æ –ª–∏–Ω–∏—è–º (—á–µ—Ç–Ω—ã–µ –ò–õ–ò –Ω–µ—á–µ—Ç–Ω—ã–µ)")
            print(f"    ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (‚â§11)")
            print(f"    ‚úÖ –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤")
            print(f"\nüìà –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
            print(f"    ‚úÖ 49 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            print(f"    ‚úÖ –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏")
            print(f"    ‚úÖ –¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
            print(f"    ‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏")
            print(f"    ‚úÖ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã")
            print(f"    ‚úÖ –°—Ç—Ä–æ–≥–æ–µ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")

        elif choice == "5":
            try:
                player_id = int(input("ID –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞: "))
                opp_club_id = int(input("ID –∫–æ–º–∞–Ω–¥—ã —Å–æ–ø–µ—Ä–Ω–∏–∫–∞: "))

                try:
                    player = Player.objects.get(id=player_id)
                    player_data = {
                        'id': player.id,
                        'name': player.name or 'Unknown',
                        'surname': player.surname or 'Player',
                        'primary_position_id': player.primary_position_id or 0,
                        'height': player.height or 180,
                        'age': player.age or 25,
                        'number': player.number or 0
                    }

                    features = extract_full_49_features(player_data, opp_club_id)
                    has_time = has_played_this_season(player_id)

                    print(f"\nüî¨ –¢–ï–°–¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ü–†–ò–ó–ù–ê–ö–û–í:")
                    print(f"    –ò–≥—Ä–æ–∫: {player.name} {player.surname}")
                    print(f"    –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(features)}")
                    print(f"    –û–∂–∏–¥–∞–ª–æ—Å—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {config['input_dim']}")
                    print(f"    –ò–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è: {'‚úÖ –ï—Å—Ç—å' if has_time else '‚ùå –ù–µ—Ç'}")

                    if len(features) == config['input_dim']:
                        print("    ‚úÖ –£–°–ü–ï–®–ù–û! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                        print(f"\nüìã –ü–µ—Ä–≤—ã–µ 10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
                        feature_names = config.get('feature_names', [])
                        for i in range(min(10, len(features))):
                            name = feature_names[i] if i < len(feature_names) else f"feature_{i}"
                            print(f"    {i + 1:2d}. {name}: {features[i]:.3f}")
                    else:
                        print("    ‚ùå –û–®–ò–ë–ö–ê! –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

                except Player.DoesNotExist:
                    print(f"‚ùå –ò–≥—Ä–æ–∫ —Å ID {player_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ ID")

        elif choice == "6":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            print("üéØ –°–∏—Å—Ç–µ–º–∞ —Å –ñ–ï–°–¢–ö–ò–ú–ò –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
            print("‚öΩ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã –¢–û–õ–¨–ö–û –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤!")
            print("üîí –°—Ç—Ä–æ–≥–æ–µ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª —á–µ—Ç–Ω–æ—Å—Ç–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏!")
            break

        else:
            print("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ 6")


if __name__ == "__main__":
    main()