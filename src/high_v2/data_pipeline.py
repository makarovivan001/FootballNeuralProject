# new_data_pipeline.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Player

import numpy as np
import pandas as pd
from django.db import models
from django.db.models import Q
from tqdm import tqdm
from game.models import Game, GameStatistic
from player.models import Player, Position, PlayerGameStatistic

# ==== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ====
SEQ_LEN = 10
CLUB_STATS_DIM = 6
PG_FIELDS = [f.name for f in PlayerGameStatistic._meta.fields
             if f.name not in ("id", "game", "player")]
F_STATS = CLUB_STATS_DIM + len(PG_FIELDS)
OV_FIELDS = [f.name for f in Player._meta
.get_field("statistic")
.related_model._meta.fields
             if f.name not in ("id", "player")]
OV_STATS_DIM = len(OV_FIELDS)
MAX_PLAYERS = 11
PLACE_IN_DIM = MAX_PLAYERS * 2

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –ø–æ–∑–∏—Ü–∏–π
print("üéØ –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –ø–æ–∑–∏—Ü–∏–π...")
all_position_ids = set([0])  # –î–æ–±–∞–≤–ª—è–µ–º 0 –¥–ª—è —Å–ª—É—á–∞–µ–≤ "–Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏"

# –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ position_id –∏–∑ –∏–≥—Ä
games_with_placements = Game.objects.filter(
    home_club_placement__isnull=False,
    away_club_placement__isnull=False
).values('home_club_placement', 'away_club_placement')

for game in games_with_placements:
    for placement_field in ['home_club_placement', 'away_club_placement']:
        placement = game[placement_field]
        if placement:
            for row in placement:
                for player_info in row:
                    pos_id = player_info.get('position_id', 0)
                    if pos_id:
                        all_position_ids.add(pos_id)

# –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Position
db_position_ids = Position.objects.values_list('id', flat=True)
all_position_ids.update(db_position_ids)

# –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
sorted_position_ids = sorted(all_position_ids)
POS2IDX = {pos_id: idx for idx, pos_id in enumerate(sorted_position_ids)}
IDX2POS = {idx: pos_id for pos_id, idx in POS2IDX.items()}

print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(sorted_position_ids)} –ø–æ–∑–∏—Ü–∏–π: {sorted_position_ids[10:]}...")

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –∏–≥—Ä–æ–∫–æ–≤ —Ç–µ–ø–µ—Ä—å –ù–ï –∏—Å–∫–ª—é—á–∞–µ–º –Ω–∏–∫–æ–≥–æ –ø–æ –ø–æ–∑–∏—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ position —Ç–µ–ø–µ—Ä—å ManyToMany
player_ids = [0] + list(Player.objects.order_by("id").values_list("id", flat=True))
PLAYER2IDX = {pid: i for i, pid in enumerate(player_ids)}
IDX2PLAYER = {i: pid for pid, i in PLAYER2IDX.items()}


def safe_float(x, default=0.0):
    try:
        v = float(x) if x is not None else default
        if np.isnan(v) or np.isinf(v):
            return default
        return np.clip(v, -1e6, 1e6)
    except:
        return default


def slot_sequence(flat):
    """
    –ò–∑ flat=[id1,pos1,id2,pos2,...] –¥–µ–ª–∞–µ–º —Ä–æ–≤–Ω–æ SEQ_LEN –ø–∞—Ä [id,pos].
    –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ SEQ_LEN, –¥–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏.
    """
    pairs = [flat[i * 2:(i + 1) * 2] for i in range(MAX_PLAYERS)]
    seq = pairs[:SEQ_LEN]
    while len(seq) < SEQ_LEN:
        seq.append([0, 0])
    return seq


def flatten_placement(js):
    """
    js = —Å–ø–∏—Å–æ–∫ —Ä—è–¥–æ–≤ [[{"id":..,"position_id":..},...], ...]
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç flat = [id1,pos1,id2,pos2,...] —Ä–æ–≤–Ω–æ –¥–ª–∏–Ω—ã PLACE_IN_DIM,
    –¥–æ–ø–æ–ª–Ω—è—è –Ω—É–ª—è–º–∏ –≤ –∫–æ–Ω—Ü–µ.
    """
    flat = []
    if js:
        for row in js:
            for c in row:
                flat += [c.get("id", 0), c.get("position_id", 0)]
                if len(flat) >= PLACE_IN_DIM:
                    break
            if len(flat) >= PLACE_IN_DIM:
                break

    # –¥–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏ –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
    if len(flat) < PLACE_IN_DIM:
        flat += [0] * (PLACE_IN_DIM - len(flat))
    return flat[:PLACE_IN_DIM]


def extract_club_stats(game, club):
    try:
        gs = GameStatistic.objects.get(game=game, club=club)
        return [
            safe_float(gs.corners),
            safe_float(gs.total_shots),
            safe_float(gs.shots_on_target),
            safe_float(gs.shots_off_target),
            safe_float(gs.accurate_passes_persent),
            safe_float(gs.tackles_succeeded_persent),
        ]
    except GameStatistic.DoesNotExist:
        return [0.0] * CLUB_STATS_DIM


def extract_playergame_stats(game, club):
    qs = PlayerGameStatistic.objects.filter(
        game=game, player__club=club
    )
    out = []
    for fld in PG_FIELDS:
        vals = []
        for pg in qs:
            v = getattr(pg, fld)
            if v is None:
                continue
            if isinstance(v, str) and "/" in v:
                a, b = v.split("/", 1)
                a, b = safe_float(a), safe_float(b)
                vals.append(a / (a + b) if (a + b) > 0 else 0.0)
            else:
                vals.append(safe_float(v))
        out.append(np.mean(vals) if vals else 0.0)
    return out


def extract_overall(club):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Player –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ position_id"""
    qs = Player.objects.filter(
        club=club, statistic__isnull=False
    ).select_related("statistic")
    out = []
    for fld in OV_FIELDS:
        vals = [safe_float(getattr(p.statistic, fld))
                for p in qs if getattr(p.statistic, fld) is not None]
        out.append(np.mean(vals) if vals else 0.0)
    return out


def aggregate_seq_stats(club, date):
    """–ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ SEQ_LEN –∏–≥—Ä –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
    past_ids = (
        GameStatistic.objects
        .filter(club=club, game__game_date__lt=date)
        .order_by("-game__game_date")
        .values_list("game", flat=True)[:SEQ_LEN]
    )
    seq = []
    for gid in past_ids:
        try:
            g = Game.objects.get(pk=gid)
            seq.append(extract_club_stats(g, club)
                       + extract_playergame_stats(g, club))
        except Game.DoesNotExist:
            seq.append([0.0] * F_STATS)
    while len(seq) < SEQ_LEN:
        seq.append([0.0] * F_STATS)
    return np.array(seq, dtype=np.float32)


def extract_formation(js):
    """
    js = placement_out JSON: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ –¥–ª–∏–Ω —Ä—è–¥–æ–≤, –Ω–∞–ø—Ä. (1,4,4,2)
    """
    if not js:
        return ()
    lengths = [len(row) for row in js]
    return tuple(lengths)


def get_opponent_placements_history(club, date, limit=10):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–æ–∫ –∫–æ–º–∞–Ω–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ limit –∏–≥—Ä
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–æ–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
    """
    past_games = Game.objects.filter(
        game_date__lt=date,
        is_finished=True
    ).filter(
        models.Q(home_club=club) | models.Q(away_club=club)
    ).order_by("-game_date")[:limit]

    opp_placements = []
    for game in past_games:
        if game.home_club == club:
            # –ö–ª—É–± –∏–≥—Ä–∞–ª –¥–æ–º–∞, –±–µ—Ä–µ–º —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É –≥–æ—Å—Ç–µ–π
            opp_placement = game.away_club_placement
        else:
            # –ö–ª—É–± –∏–≥—Ä–∞–ª –≤ –≥–æ—Å—Ç—è—Ö, –±–µ—Ä–µ–º —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É —Ö–æ–∑—è–µ–≤
            opp_placement = game.home_club_placement

        if opp_placement:
            flat_placement = flatten_placement(opp_placement)
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            flat_indexed = []
            for i in range(0, len(flat_placement), 2):
                player_id = flat_placement[i]
                pos_id = flat_placement[i + 1] if i + 1 < len(flat_placement) else 0
                player_idx = PLAYER2IDX.get(player_id, 0)
                pos_idx = POS2IDX.get(pos_id, 0)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
                flat_indexed.extend([player_idx, pos_idx])
            opp_placements.append(slot_sequence(flat_indexed))

    # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    while len(opp_placements) < limit:
        opp_placements.append([[0, 0]] * SEQ_LEN)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ —Ä–∞–∑–º–µ—Ä–∞ (limit, SEQ_LEN, 2)
    result = np.array(opp_placements[:limit], dtype=np.float32)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
    if result.shape != (limit, SEQ_LEN, 2):
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
        correct_result = np.zeros((limit, SEQ_LEN, 2), dtype=np.float32)
        for i, placement in enumerate(opp_placements[:limit]):
            placement_array = np.array(placement, dtype=np.float32)
            if placement_array.shape == (SEQ_LEN, 2):
                correct_result[i] = placement_array
        result = correct_result

    return result


# –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥
def create_club_player_mask(club_id):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ—Ç –º–∞—Å–∫—É –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    club_players = Player.objects.filter(club_id=club_id).values_list('id', flat=True)
    mask = np.zeros(len(PLAYER2IDX), dtype=np.float32)

    for player_id in club_players:
        player_idx = PLAYER2IDX.get(player_id, 0)
        if 0 < player_idx < len(mask):  # –ò—Å–∫–ª—é—á–∞–µ–º –∏–Ω–¥–µ–∫—Å 0 (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫)
            mask[player_idx] = 1.0

    return mask


def analyze_training_data(df):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    players_per_team = {}
    for _, row in df.iterrows():
        club_id = row['club_id']
        if club_id not in players_per_team:
            club_players = Player.objects.filter(club_id=club_id).count()
            players_per_team[club_id] = club_players

    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:")
    print(f"    –°—Ä–µ–¥–Ω–µ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—É: {np.mean(list(players_per_team.values())):.1f}")
    print(f"    –ú–∏–Ω/–ú–∞–∫—Å –∏–≥—Ä–æ–∫–æ–≤: {min(players_per_team.values())}-{max(players_per_team.values())}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
    player_frequency = {}
    for _, row in df.iterrows():
        for player_idx in row['y_players']:
            player_frequency[player_idx] = player_frequency.get(player_idx, 0) + 1

    print(f"üìä –¢–æ–ø-10 —Å–∞–º—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:")
    top_players = sorted(player_frequency.items(), key=lambda x: x[1], reverse=True)[:10]
    for player_idx, count in top_players:
        player_id = IDX2PLAYER.get(player_idx, 0)
        player_obj = Player.objects.filter(id=player_id).first()
        name = f"{player_obj.name} {player_obj.surname}" if player_obj else f"ID:{player_id}"
        print(f"    {name}: {count} –∏–≥—Ä")

    # –ù–û–í–û–ï: –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π –∏–≥—Ä–æ–∫–æ–≤
    print(f"üìä –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π –∏–≥—Ä–æ–∫–æ–≤:")
    players_with_positions = Player.objects.filter(
        primary_position__isnull=False
    ).select_related('primary_position')

    position_counts = {}
    for player in players_with_positions:
        pos_name = player.primary_position.name
        position_counts[pos_name] = position_counts.get(pos_name, 0) + 1

    print(f"    –¢–æ–ø-5 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:")
    top_positions = sorted(position_counts.items(), key=lambda x: x[1], reverse=True)[:5]
    for pos_name, count in top_positions:
        print(f"      {pos_name}: {count} –∏–≥—Ä–æ–∫–æ–≤")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –±–µ–∑ —Ç—Ä–∞–≤–º
    healthy_players = Player.objects.filter(injury__isnull=True).count()
    total_players = Player.objects.count()
    print(f"üìä –ó–¥–æ—Ä–æ–≤—ã–µ –∏–≥—Ä–æ–∫–∏: {healthy_players}/{total_players} ({healthy_players / total_players * 100:.1f}%)")

    return players_per_team


def get_player_position_compatibility(player_id, target_position_id):
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞ —Å –ø–æ–∑–∏—Ü–∏–µ–π
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–æ—Ä –æ—Ç 0 –¥–æ 1
    """
    try:
        player = Player.objects.get(id=player_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        if player.primary_position and player.primary_position.id == target_position_id:
            return 1.0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        if player.position.filter(id=target_position_id).exists():
            return 0.8

        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∏–∑–∫–∏–π —Å–∫–æ—Ä
        return 0.1

    except Player.DoesNotExist:
        return 0.0


def build_raw_rows():
    """
    –°–æ–±–∏—Ä–∞–µ—Ç DataFrame —Å–æ –≤—Å–µ–º–∏ —Ñ–∏—á–∞–º–∏ –∏ —Ç–∞—Ä–≥–µ—Ç–∞–º–∏
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç ID –ø–æ–∑–∏—Ü–∏–π —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    """
    print("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    rows = []
    games = Game.objects.filter(
        game_date__year__gte=2010, is_finished=True
    ).select_related("home_club", "away_club")

    total_games = games.count()
    print(f"üéÆ –ù–∞–π–¥–µ–Ω–æ {total_games} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä —Å 2010 –≥–æ–¥–∞")

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
    print("üìà –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥...")
    all_clubs = set()
    for g in games:
        all_clubs.add(g.home_club)
        all_clubs.add(g.away_club)

    club_overall_cache = {}
    for club in tqdm(all_clubs, desc="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥"):
        club_overall_cache[club.id] = extract_overall(club)

    print("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∏–≥—Ä—É...")

    for g in tqdm(games, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä", total=total_games):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        home_overall = club_overall_cache[g.home_club.id]
        away_overall = club_overall_cache[g.away_club.id]

        for is_home in (True, False):
            club = g.home_club if is_home else g.away_club  # –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
            opp = g.away_club if is_home else g.home_club  # —Å–æ–ø–µ—Ä–Ω–∏–∫

            # –¶–ï–õ–ï–í–ê–Ø —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ (—Ç–æ, —á—Ç–æ –º—ã –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º)
            placement_out_js = (
                g.home_club_placement if is_home else g.away_club_placement
            )

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—ã –±–µ–∑ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏
            if not placement_out_js:
                continue

            # –í–•–û–î–ù–ê–Ø —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ (–∏–∑–≤–µ—Å—Ç–Ω–∞—è) - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∏–Ω–¥–µ–∫—Å—ã
            opp_placement_js = (
                g.away_club_placement if is_home else g.home_club_placement
            )
            flat_opp = flatten_placement(opp_placement_js)

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            flat_opp_indexed = []
            for i in range(0, len(flat_opp), 2):
                player_id = flat_opp[i]
                pos_id = flat_opp[i + 1] if i + 1 < len(flat_opp) else 0
                player_idx = PLAYER2IDX.get(player_id, 0)
                pos_idx = POS2IDX.get(pos_id, 0)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
                flat_opp_indexed.extend([player_idx, pos_idx])

            opp_placement_seq = slot_sequence(flat_opp_indexed)

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¶–µ–ª–µ–≤—ã–µ –º–µ—Ç–∫–∏ —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏
            flat_out = flatten_placement(placement_out_js)
            y_players, y_positions = [], []
            for i in range(0, PLACE_IN_DIM, 2):
                player_id = flat_out[i]
                pos_id = flat_out[i + 1] if i + 1 < len(flat_out) else 0
                y_players.append(PLAYER2IDX.get(player_id, 0))
                y_positions.append(POS2IDX.get(pos_id, 0))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–≥—Ä
            club_seq_stats = aggregate_seq_stats(club, g.game_date)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–≥—Ä
            opp_seq_stats = aggregate_seq_stats(opp, g.game_date)

            # –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–æ–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
            opp_placements_history = get_opponent_placements_history(club, g.game_date)

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥
            club_overall = home_overall if is_home else away_overall
            opp_overall = away_overall if is_home else home_overall

            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            m, d = g.game_date.month, g.game_date.weekday()
            date_feats = [
                safe_float(np.sin(2 * np.pi * m / 12)),
                safe_float(np.cos(2 * np.pi * m / 12)),
                safe_float(np.sin(2 * np.pi * d / 7)),
                safe_float(np.cos(2 * np.pi * d / 7)),
            ]

            formation = extract_formation(placement_out_js)

            rows.append({
                "game_date": g.game_date,
                "club_id": club.id,
                "opp_id": opp.id,
                "date_feats": date_feats,
                "club_overall_stats": club_overall,
                "opp_overall_stats": opp_overall,
                "club_seq_stats": club_seq_stats.tolist(),
                "opp_seq_stats": opp_seq_stats.tolist(),
                "opp_placement_input": opp_placement_seq,
                "opp_placements_history": opp_placements_history.tolist(),
                "y_players": y_players,
                "y_positions": y_positions,
                "placement_out_js": placement_out_js,
                "formation": formation,
            })

    print(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∑–∏—Ü–∏–π: –≤—Å–µ–≥–æ {len(POS2IDX)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤: –≤—Å–µ–≥–æ {len(PLAYER2IDX)} –∏–≥—Ä–æ–∫–æ–≤")
    return pd.DataFrame(rows)


def time_split(df):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–æ–¥–∞–º –¥–ª—è –æ–±—É—á–µ–Ω–∏—è/–≤–∞–ª–∏–¥–∞—Ü–∏–∏/—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    df = df.sort_values("game_date")
    train = df[df.game_date.dt.year <= 2023]
    val = df[df.game_date.dt.year == 2024]
    test = df[df.game_date.dt.year == 2025]
    return train.reset_index(drop=True), \
        val.reset_index(drop=True), \
        test.reset_index(drop=True)