# position_validation.py - –õ–æ–≥–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–æ–≤

import os
import django

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "football_main.settings")
django.setup()

from game.models import Game
from player.models import Player, Position
from club.models import Club
from django.db.models import Q


def get_last_game_lineup(club_id, before_date=None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–∞–≤ –∫–ª—É–±–∞ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã

    Args:
        club_id: ID –∫–ª—É–±–∞
        before_date: –î–∞—Ç–∞, –¥–æ –∫–æ—Ç–æ—Ä–æ–π –∏—Å–∫–∞—Ç—å –∏–≥—Ä—ã (–¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã)

    Returns:
        dict: {position_id: player_id} –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã
    """
    try:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–≥—Ä—É –∫–ª—É–±–∞
        games_query = Game.objects.filter(
            Q(home_club_id=club_id) | Q(away_club_id=club_id),
            is_finished=True
        )

        if before_date:
            games_query = games_query.filter(game_date__lt=before_date)

        last_game = games_query.order_by('-game_date').first()

        if not last_game:
            return {}

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏–≥—Ä–∞–ª –ª–∏ –∫–ª—É–± –¥–æ–º–∞ –∏–ª–∏ –≤ –≥–æ—Å—Ç—è—Ö
        if last_game.home_club_id == club_id:
            placement = last_game.home_club_placement
        else:
            placement = last_game.away_club_placement

        if not placement:
            return {}

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏ –∏–≥—Ä–æ–∫–æ–≤
        last_game_lineup = {}
        for row in placement:
            for cell in row:
                player_id = cell.get("id")
                position_id = cell.get("position_id")
                if player_id and position_id:
                    last_game_lineup[position_id] = player_id

        return last_game_lineup

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã –¥–ª—è –∫–ª—É–±–∞ {club_id}: {e}")
        return {}


def check_player_position_compatibility(player_id, position_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–≥—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏

    Args:
        player_id: ID –∏–≥—Ä–æ–∫–∞
        position_id: ID –ø–æ–∑–∏—Ü–∏–∏

    Returns:
        bool: True –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
    """
    try:
        player = Player.objects.get(id=player_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        if player.primary_position_id == position_id:
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (ManyToMany)
        if player.position.filter(id=position_id).exists():
            return True

        return False

    except Player.DoesNotExist:
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞ {player_id} —Å –ø–æ–∑–∏—Ü–∏–µ–π {position_id}: {e}")
        return False


def find_position_players_in_club(club_id, position_id):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–ª—É–±–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏–≥—Ä–∞—Ç—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏

    Args:
        club_id: ID –∫–ª—É–±–∞
        position_id: ID –ø–æ–∑–∏—Ü–∏–∏

    Returns:
        list: –°–ø–∏—Å–æ–∫ ID –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏–≥—Ä–∞—Ç—å –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
    """
    try:
        # –ò–≥—Ä–æ–∫–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
        primary_players = Player.objects.filter(
            club_id=club_id,
            primary_position_id=position_id,
            injury__isnull=True  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç—Ä–∞–≤–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        ).values_list('id', flat=True)

        # –ò–≥—Ä–æ–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
        secondary_players = Player.objects.filter(
            club_id=club_id,
            position__id=position_id,
            injury__isnull=True  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç—Ä–∞–≤–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        ).values_list('id', flat=True)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        all_players = list(set(list(primary_players) + list(secondary_players)))

        return all_players

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position_id} –≤ –∫–ª—É–±–µ {club_id}: {e}")
        return []


def validate_and_correct_predicted_lineup(predicted_lineup, club_id, game_date=None):
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–π –∏–≥—Ä–æ–∫–æ–≤

    Args:
        predicted_lineup: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º —Å–æ—Å—Ç–∞–≤–æ–º
                         [{'id': player_id, 'position_id': pos_id, 'name': name}, ...]
        club_id: ID –∫–ª—É–±–∞
        game_date: –î–∞—Ç–∞ –∏–≥—Ä—ã (–¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã –¥–æ —ç—Ç–æ–π –¥–∞—Ç—ã)

    Returns:
        tuple: (corrected_lineup, validation_report)
    """
    print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ –¥–ª—è –∫–ª—É–±–∞ {club_id}")

    corrected_lineup = []
    validation_report = {
        'total_players': len(predicted_lineup),
        'valid_predictions': 0,
        'corrected_predictions': 0,
        'issues': []
    }

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã
    last_game_lineup = get_last_game_lineup(club_id, game_date)
    print(f"üìã –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞: –Ω–∞–π–¥–µ–Ω–æ {len(last_game_lineup)} –ø–æ–∑–∏—Ü–∏–π")

    for i, player_data in enumerate(predicted_lineup):
        player_id = player_data.get('id')
        predicted_position_id = player_data.get('position_id')
        player_name = player_data.get('name', f'Player_{player_id}')

        print(f"\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ {i + 1}/{len(predicted_lineup)}: {player_name} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {predicted_position_id}")

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –∏–≥—Ä–∞—Ç—å –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        can_play_position = check_player_position_compatibility(player_id, predicted_position_id)

        if can_play_position:
            # –ò–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ - –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            print(f"‚úÖ {player_name} –º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {predicted_position_id}")
            corrected_lineup.append(player_data)
            validation_report['valid_predictions'] += 1
        else:
            # –ò–≥—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ - –∏—â–µ–º –∑–∞–º–µ–Ω—É
            print(f"‚ùå {player_name} –Ω–µ –º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {predicted_position_id}")

            # 2. –ò—â–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–ª—É–±–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏–≥—Ä–∞—Ç—å –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
            position_players = find_position_players_in_club(club_id, predicted_position_id)

            if not position_players:
                # –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ - –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
                print(f"‚ö†Ô∏è –í –∫–ª—É–±–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {predicted_position_id}, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ò–ò")
                corrected_lineup.append(player_data)
                validation_report['issues'].append({
                    'type': 'no_position_players',
                    'player_id': player_id,
                    'position_id': predicted_position_id,
                    'message': f'–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {predicted_position_id}'
                })
            else:
                # 3. –ï—Å—Ç—å –∏–≥—Ä–æ–∫–∏ –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–≥—Ä—É
                replacement_player_id = None

                # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞ —Å —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã
                if predicted_position_id in last_game_lineup:
                    last_game_player_id = last_game_lineup[predicted_position_id]
                    if last_game_player_id in position_players:
                        replacement_player_id = last_game_player_id
                        print(f"üîÑ –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã: {last_game_player_id}")

                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä–µ, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
                if not replacement_player_id:
                    replacement_player_id = position_players[0]
                    print(f"üîÑ –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞: {replacement_player_id}")

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–æ–∫–µ-–∑–∞–º–µ–Ω–µ
                try:
                    replacement_player = Player.objects.get(id=replacement_player_id)
                    replacement_name = f"{replacement_player.name} {replacement_player.surname}"
                except Player.DoesNotExist:
                    replacement_name = f"Player_{replacement_player_id}"

                corrected_player_data = {
                    'id': replacement_player_id,
                    'position_id': predicted_position_id,
                    'name': replacement_name
                }

                corrected_lineup.append(corrected_player_data)
                validation_report['corrected_predictions'] += 1
                validation_report['issues'].append({
                    'type': 'position_mismatch_corrected',
                    'original_player_id': player_id,
                    'corrected_player_id': replacement_player_id,
                    'position_id': predicted_position_id,
                    'message': f'–ó–∞–º–µ–Ω–µ–Ω {player_name} –Ω–∞ {replacement_name}'
                })

                print(f"‚úÖ –ó–∞–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {replacement_name} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {predicted_position_id}")

    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –ò–¢–û–ì–ò –í–ê–õ–ò–î–ê–¶–ò–ò:")
    print(f"    –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {validation_report['total_players']}")
    print(f"    –í–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {validation_report['valid_predictions']}")
    print(f"    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {validation_report['corrected_predictions']}")
    print(f"    –ü—Ä–æ–±–ª–µ–º: {len(validation_report['issues'])}")

    if validation_report['issues']:
        print(f"\n‚ö†Ô∏è –î–ï–¢–ê–õ–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
        for issue in validation_report['issues']:
            print(f"    {issue['message']}")

    return corrected_lineup, validation_report


def validate_lineup_by_lines(lineup_by_lines, club_id, game_date=None):
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–∞–≤, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ –ª–∏–Ω–∏—è–º

    Args:
        lineup_by_lines: –°–ø–∏—Å–æ–∫ –ª–∏–Ω–∏–π —Å –∏–≥—Ä–æ–∫–∞–º–∏
        club_id: ID –∫–ª—É–±–∞
        game_date: –î–∞—Ç–∞ –∏–≥—Ä—ã

    Returns:
        tuple: (corrected_lineup_by_lines, validation_report)
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç "–ø–æ –ª–∏–Ω–∏—è–º" –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫
    flat_lineup = []
    for line in lineup_by_lines:
        for player in line:
            flat_lineup.append(player)

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫
    corrected_flat_lineup, validation_report = validate_and_correct_predicted_lineup(
        flat_lineup, club_id, game_date
    )

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç "–ø–æ –ª–∏–Ω–∏—è–º"
    corrected_lineup_by_lines = []
    flat_index = 0

    for line in lineup_by_lines:
        corrected_line = []
        for _ in line:
            if flat_index < len(corrected_flat_lineup):
                corrected_line.append(corrected_flat_lineup[flat_index])
                flat_index += 1
        corrected_lineup_by_lines.append(corrected_line)

    return corrected_lineup_by_lines, validation_report


def test_validation_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –í–ê–õ–ò–î–ê–¶–ò–ò")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ
    try:
        test_game = Game.objects.filter(
            home_club_placement__isnull=False,
            away_club_placement__isnull=False,
            is_finished=True
        ).first()

        if not test_game:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–≥—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        print(f"üéÆ –¢–µ—Å—Ç–æ–≤–∞—è –∏–≥—Ä–∞: {test_game.home_club.name} vs {test_game.away_club.name}")

        # –ë–µ—Ä–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –∫–∞–∫ "–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"
        test_placement = test_game.home_club_placement
        test_lineup = []

        for row in test_placement:
            for cell in row:
                player_id = cell.get("id")
                position_id = cell.get("position_id")
                if player_id and position_id:
                    try:
                        player = Player.objects.get(id=player_id)
                        test_lineup.append({
                            'id': player_id,
                            'position_id': position_id,
                            'name': f"{player.name} {player.surname}"
                        })
                    except Player.DoesNotExist:
                        test_lineup.append({
                            'id': player_id,
                            'position_id': position_id,
                            'name': f"Player_{player_id}"
                        })

        print(f"üìã –¢–µ—Å—Ç–æ–≤—ã–π —Å–æ—Å—Ç–∞–≤: {len(test_lineup)} –∏–≥—Ä–æ–∫–æ–≤")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        corrected_lineup, report = validate_and_correct_predicted_lineup(
            test_lineup, test_game.home_club.id, test_game.game_date
        )

        print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


# –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
def enhanced_predict_lineup(game_id, is_home=True):
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –ø–æ–∑–∏—Ü–∏–π
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–µ–π predict_sklearn_lineup
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ —ç—Ç–æ –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç)
    # from ai import predict_sklearn_lineup

    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        print("ü§ñ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...")
        # predicted_lineup, lineup_by_lines, accuracy = predict_sklearn_lineup(game_id, is_home)

        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        game = Game.objects.get(pk=game_id)
        club = game.home_club if is_home else game.away_club

        # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –≤–∞—à–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        predicted_lineup = []
        lineup_by_lines = []

        print("üîç –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–∑–∏—Ü–∏–π...")

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        if lineup_by_lines:
            corrected_lineup_by_lines, validation_report = validate_lineup_by_lines(
                lineup_by_lines, club.id, game.game_date
            )
        else:
            corrected_lineup_by_lines = []
            validation_report = {'total_players': 0, 'valid_predictions': 0, 'corrected_predictions': 0, 'issues': []}

        # –¢–∞–∫–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫
        if predicted_lineup:
            corrected_predicted_lineup, _ = validate_and_correct_predicted_lineup(
                predicted_lineup, club.id, game.game_date
            )
        else:
            corrected_predicted_lineup = []

        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"    –ò—Å—Ö–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {validation_report['total_players']}")
        print(f"    –í–∞–ª–∏–¥–Ω—ã—Ö: {validation_report['valid_predictions']}")
        print(f"    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {validation_report['corrected_predictions']}")

        return corrected_predicted_lineup, corrected_lineup_by_lines, validation_report

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return [], [], {}


if __name__ == "__main__":
    print("üéØ –°–ò–°–¢–ï–ú–ê –í–ê–õ–ò–î–ê–¶–ò–ò –ü–û–ó–ò–¶–ò–ô")
    print("=" * 50)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    test_validation_logic()

    print(f"\nüìö –î–û–°–¢–£–ü–ù–´–ï –§–£–ù–ö–¶–ò–ò:")
    print(f"    validate_and_correct_predicted_lineup() - –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–æ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞")
    print(f"    validate_lineup_by_lines() - –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –ª–∏–Ω–∏—è–º")
    print(f"    enhanced_predict_lineup() - –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π")
    print(f"    check_player_position_compatibility() - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
    print(f"    find_position_players_in_club() - –ø–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏–∏")
    print(f"    get_last_game_lineup() - —Å–æ—Å—Ç–∞–≤ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã")